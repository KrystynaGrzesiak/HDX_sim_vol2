isotope_dists = data.frame()
} else {
tryCatch({
times_to_record = get_recording_times(time_sequence, times)
times_to_record = setdiff(times_to_record, 0)
transition_probs = get_exchange_probabilities(kcHD, kcDH, deltaT, protection_factor)
transition_probs[["HH"]] <- 1 - transition_probs[["HD"]]
transition_probs[["DD"]] <- 1 - transition_probs[["DH"]]
HD_matrices = get_HD_matrices_using_markov(sequence, transition_probs,
time_sequence, times_to_record,
n_molecules)
isotope_dists = lapply(1:length(times_to_record), function(ith_time) {
observed_dist = get_observed_iso_dist(HD_matrices[[ith_time]], isotopic_probs, maxD)
observed_peaks = matrix(0, maxD + maxND + 1, 2)
DM = 1.00628
observed_peaks[1, 1] = peptide_mass / charge + 1.007276
observed_peaks[1, 2] = observed_dist[1]
for (i in 2:(maxD + maxND + 1)) {
observed_peaks[i, 1] = observed_peaks[i - 1, 1] + DM / charge
observed_peaks[i, 2] = observed_dist[i]
}
data.frame(
Exposure = times[ith_time],
Mz = observed_peaks[, 1],
Intensity = observed_peaks[, 2],
PH = pH
)
})
isotope_dists = do.call("rbind", isotope_dists)
})
}
isotope_dists = rbind(data.frame(Exposure = 0,
Mz = peptide_mass / charge + 1.007276,
Intensity = isotopic_probs,
PH = pH),
isotope_dists)
isotope_dists[["Sequence"]] = paste0(sequence, collapse = "")
if (length(unique(protection_factor)) == 1) {
isotope_dists[["PF"]] = protection_factor[1]
} else {
isotope_dists[["PF"]] = paste(protection_factor,
sep = ",", collapse = ",")
}
isotope_dists[["Charge"]] = charge
isotope_dists[["Sim"]] = "markov"
isotope_dists = isotope_dists[isotope_dists[["Intensity"]] > min_probability, ]
get_deuteration_curve_single_spectrum(data.table::as.data.table(isotope_dists))
}
params <- readRDS(file = "../theo_spectra_sim/all_params_new_pf.RDS")
times <- c(5, 10, 20, 30, 40, 50, 60, 100, 300, 500, 900, 1200, 1500, 1800,
2100, 2400, 3600, 7200, 21600, 43200)
set.seed(2000020)
params$charge <- as.numeric(params$charge)
params$n_steps <- as.numeric(params$n_steps)
param <- params[117, ]
benchmark_curves <- function(param, n = 1000) {
result <- lapply(1:n, function(i) {
rbind(curves_using_package(sequence = param$sequence,
protection_factor = param$protection_factor,
charge = param$charge,
times = times,
pH = param$pH,
time_step_const = param$step),
curves_using_markov_chain(sequence = param$sequence,
protection_factor = param$protection_factor,
charge = param$charge,
times = times,
pH = param$pH,
time_step_const = param$step))
})
do.call(rbind, result)
}
sample_params <- params %>%
filter(n_steps  < 128819.452, pH == 6, charge == 5)
sample_params <- sample_params[1:6, ]
setwd("G:/HDX_sim_vol2/MArkov_sim")
library(powerHDX)
library(ggplot2)
library(dplyr)
library(markovchain)
library(microbenchmark)
load("../theo_spectra_sim/sysdata.rda")
curves_using_package <- function(sequence, charge = NULL, protection_factor = 1,
times = c(60, 600), pH = 7.5,
temperature = 15, n_molecules = 100,
time_step_const = 1, if_corr = 0,
min_probability = 1e-4) {
sequence = strsplit(sequence, "")[[1]]
if (length(protection_factor) == 1L) {
protection_factor = rep(protection_factor, length(sequence))
}
if (is.null(charge)) {
charge = sample(2:6, 1)
}
peptide_iso_dist = get_approx_isotopic_distribution(sequence, min_probability)
peptide_mass = peptide_iso_dist[[1]]
isotopic_probs = peptide_iso_dist[[2]]
maxND = peptide_iso_dist[[3]]
maxD = peptide_iso_dist[[4]]
kcHD = get_exchange_rates(sequence, "HD", pH, temperature, 'poly', if_corr)
kcDH = get_exchange_rates(sequence, "DH", pH, temperature, 'poly')
kmax = max(max(kcDH), max(kcHD))
deltaT = time_step_const / kmax
time_sequence = seq(0, max(times), deltaT)
if (time_sequence == 0 && length(time_sequence) == 1) {
print("There is no deuteration before given time point.")
isotope_dists = data.frame()
} else {
tryCatch({
times_to_record = get_recording_times(time_sequence, times)
times_to_record = setdiff(times_to_record, 0)
transition_probs = get_exchange_probabilities(kcHD, kcDH, deltaT, protection_factor)
HD_matrices = get_HD_matrices(sequence, transition_probs,
time_sequence, times_to_record,
n_molecules)
isotope_dists = lapply(1:length(times_to_record), function(ith_time) {
observed_dist = get_observed_iso_dist(HD_matrices[[ith_time]], isotopic_probs, maxD)
observed_peaks = matrix(0, maxD + maxND + 1, 2)
DM = 1.00628
observed_peaks[1, 1] = peptide_mass / charge + 1.007276
observed_peaks[1, 2] = observed_dist[1]
for (i in 2:(maxD + maxND + 1)) {
observed_peaks[i, 1] = observed_peaks[i - 1, 1] + DM / charge
observed_peaks[i, 2] = observed_dist[i]
}
data.frame(
Exposure = times[ith_time],
Mz = observed_peaks[, 1],
Intensity = observed_peaks[, 2],
PH = pH
)
})
isotope_dists = do.call("rbind", isotope_dists)
})
}
isotope_dists = rbind(data.frame(Exposure = 0,
Mz = peptide_mass / charge + 1.007276,
Intensity = isotopic_probs,
PH = pH),
isotope_dists)
isotope_dists[["Sequence"]] = paste0(sequence, collapse = "")
if (length(unique(protection_factor)) == 1) {
isotope_dists[["PF"]] = protection_factor[1]
} else {
isotope_dists[["PF"]] = paste(protection_factor,
sep = ",", collapse = ",")
}
isotope_dists[["Charge"]] = charge
isotope_dists[["Sim"]] = "pkg"
isotope_dists = isotope_dists[isotope_dists[["Intensity"]] > min_probability, ]
data.table::as.data.table(isotope_dists)
get_deuteration_curve_single_spectrum(data.table::as.data.table(isotope_dists))
}
get_HD_matrices_using_markov = function(sequence, transition_probs, experiment_times,
times_to_record, n_molecules = 100) {
peptide_length = length(sequence)
separated_times = split(experiment_times,
cut(experiment_times, c(0, times_to_record),
include.lowest = TRUE))
initial_state <- c(1, 0)
transition_matrix_n_step <- diag(2)
steps <- 0
hd_matrices <- lapply(1:length(times_to_record), function(i) {
steps <- steps + length(separated_times[[i]])
HDmatrix <- sapply(1:peptide_length, function(amino_acid) {
transition_matrix <- matrix(c(transition_probs[["HH"]][amino_acid], transition_probs[["HD"]][amino_acid],
transition_probs[["DH"]][amino_acid], transition_probs[["DD"]][amino_acid]), nrow = 2,
byrow = TRUE)
chain <- new('markovchain', states = c("0", "1"),
transitionMatrix = transition_matrix)  # 0 denotes hydrogen, 1 denotes deuterium
sample(c(0, 1), n_molecules, replace = TRUE, prob = initial_state*chain^steps)
})
HDmatrix[, unique(c(1, 2, which(sequence == "P")))] = 0
HDmatrix
})
}
curves_using_markov_chain <- function(sequence, charge = NULL, protection_factor = 1,
times = c(60, 600), pH = 7.5,
temperature = 15, n_molecules = 100,
time_step_const = 1, if_corr = 0,
min_probability = 1e-4) {
sequence = strsplit(sequence, "")[[1]]
if (length(protection_factor) == 1L) {
protection_factor = rep(protection_factor, length(sequence))
}
if (is.null(charge)) {
charge = sample(2:6, 1)
}
peptide_iso_dist = get_approx_isotopic_distribution(sequence, min_probability)
peptide_mass = peptide_iso_dist[[1]]
isotopic_probs = peptide_iso_dist[[2]]
maxND = peptide_iso_dist[[3]]
maxD = peptide_iso_dist[[4]]
kcHD = get_exchange_rates(sequence, "HD", pH, temperature, 'poly', if_corr)
kcDH = get_exchange_rates(sequence, "DH", pH, temperature, 'poly')
kmax = max(max(kcDH), max(kcHD))
deltaT = time_step_const / kmax
time_sequence = seq(0, max(times), deltaT)
if (time_sequence == 0 && length(time_sequence) == 1) {
print("There is no deuteration before given time point.")
isotope_dists = data.frame()
} else {
tryCatch({
times_to_record = get_recording_times(time_sequence, times)
times_to_record = setdiff(times_to_record, 0)
transition_probs = get_exchange_probabilities(kcHD, kcDH, deltaT, protection_factor)
transition_probs[["HH"]] <- 1 - transition_probs[["HD"]]
transition_probs[["DD"]] <- 1 - transition_probs[["DH"]]
HD_matrices = get_HD_matrices_using_markov(sequence, transition_probs,
time_sequence, times_to_record,
n_molecules)
isotope_dists = lapply(1:length(times_to_record), function(ith_time) {
observed_dist = get_observed_iso_dist(HD_matrices[[ith_time]], isotopic_probs, maxD)
observed_peaks = matrix(0, maxD + maxND + 1, 2)
DM = 1.00628
observed_peaks[1, 1] = peptide_mass / charge + 1.007276
observed_peaks[1, 2] = observed_dist[1]
for (i in 2:(maxD + maxND + 1)) {
observed_peaks[i, 1] = observed_peaks[i - 1, 1] + DM / charge
observed_peaks[i, 2] = observed_dist[i]
}
data.frame(
Exposure = times[ith_time],
Mz = observed_peaks[, 1],
Intensity = observed_peaks[, 2],
PH = pH
)
})
isotope_dists = do.call("rbind", isotope_dists)
})
}
isotope_dists = rbind(data.frame(Exposure = 0,
Mz = peptide_mass / charge + 1.007276,
Intensity = isotopic_probs,
PH = pH),
isotope_dists)
isotope_dists[["Sequence"]] = paste0(sequence, collapse = "")
if (length(unique(protection_factor)) == 1) {
isotope_dists[["PF"]] = protection_factor[1]
} else {
isotope_dists[["PF"]] = paste(protection_factor,
sep = ",", collapse = ",")
}
isotope_dists[["Charge"]] = charge
isotope_dists[["Sim"]] = "markov"
isotope_dists = isotope_dists[isotope_dists[["Intensity"]] > min_probability, ]
get_deuteration_curve_single_spectrum(data.table::as.data.table(isotope_dists))
}
params <- readRDS(file = "../theo_spectra_sim/all_params_new_pf.RDS")
times <- c(5, 10, 20, 30, 40, 50, 60, 100, 300, 500, 900, 1200, 1500, 1800,
2100, 2400, 3600, 7200, 21600, 43200)
set.seed(2000020)
params$charge <- as.numeric(params$charge)
params$n_steps <- as.numeric(params$n_steps)
param <- params[117, ]
benchmark_curves <- function(param, n = 1000) {
result <- lapply(1:n, function(i) {
rbind(curves_using_package(sequence = param$sequence,
protection_factor = param$protection_factor,
charge = param$charge,
times = times,
pH = param$pH,
time_step_const = param$step),
curves_using_markov_chain(sequence = param$sequence,
protection_factor = param$protection_factor,
charge = param$charge,
times = times,
pH = param$pH,
time_step_const = param$step))
})
do.call(rbind, result)
}
sample_params <- params %>%
filter(n_steps  < 128819.452, pH == 6, charge == 5)
sample_params <- sample_params[1:6, ]
sample_params[1, ]
sample_params[3, ]
sample_params[2, ]
sample_params[5, ]
sample_params[6, ]
sample_params
results_1000 <- benchmark_curves(sample_params[4, ], n = 1000)
saveRDS(results_1000, file = "./benchmark1000.RDS")
compute_NA_frac_base <- function(data) {
colMeans(is.na(data))
}
compute_NA_frac_base(airquality)
ggplot(results_1000, aes(x = Exposure, y = Mass, col = Sim)) +
geom_point() +
geom_line()
ggplot(results_1000, aes(x = Exposure, y = Mass, col = Sim)) +
geom_point() +
geom_line()
results_1000
result <- results_1000 %>%
group_by(Exposure, Sim, Sequence, PF, PH) %>%
mutate(Mean_mass = mean(Mass)) %>%
ungroup %>%
select(-Mass) %>%
unique() %>%
rename(Mass = Mean_mass)
result
ggplot(result, aes(x = Exposure, y = Mass, col = Sim)) +
geom_point() +
geom_line()
data %>%
summarise_all(funs(mean(is.na(.))))
airquality[, sum(is.na(.SD)),  .SDcols = 1]
library(data.table)
airquality[, sum(is.na(.SD)),  .SDcols = 1]
airquality[, sum(is.na(.SD)),  ]
airquality[, sum(is.na(.)),  ]
sum(is.na(.SD))
airquality[, sum(is.na(.SD)),  ]
airquality[sum(is.na(.SD)),  ]
airquality[sum(is.na(.SD))]
airquality[, sum(is.na(.SD))]
data <- as.data.table(airquality)
data
airquality[, sum(is.na(.SD)), ]
data[, sum(is.na(.SD)), ]
data[, sum(is.na(.SD)), .SDcols = 1]
data[, sum(is.na(.SD)), .SDcols = 1:2]
data[, mean(is.na(.SD)), .SDcols = 1]
data[, mean(is.na(.SD)), .SDcols = Variables]
data[, mean(is.na(.SD)), .SDcols = .sD]
data[, mean(is.na(.SD)), .SDcols = .SD]
data[, mean(is.na(.SD)), .SDcols = 1]
data[, mean(is.na(.SD)), ]
data[, mean(is.na(.SD)), by=group]
data[, mean(is.na(.SD)), .SDcols=names(data)]
data[, lapply(.SD, function(col) sum(is.na(col))), ]
data[, lapply(.SD, function(col) mean(is.na(col))), ]
library(dplyr)
library(data.table)
compute_NA_frac_base <- function(data) {
colMeans(is.na(data))
}
compute_NA_frac_dplyr <- function(data) {
data %>%
summarise_all(funs(mean(is.na(.))))
}
compute_NA_frac_dt <- function(data) {
data[, lapply(.SD, function(col) mean(is.na(col))), ]
}
compute_NA_frac_base(airquality)
compute_NA_frac_dplyr(data)
compute_NA_frac_dt(as.data.table(airquality))
benchmark <- readRDS("G:/HDX_sim_vol2/MArkov_sim/benchmark.RDS")
benchmark <- readRDS("G:/HDX_sim_vol2/MArkov_sim/benchmark.RDS")
ggplot(benchmark, aes(x = Exposure, y = Mass, col = Sim)) +
geom_point() +
geom_line() +
facet_wrap(~Sequence, scales = "free_y")
library(powerHDX)
library(ggplot2)
library(dplyr)
library(markovchain)
library(microbenchmark)
benchmark <- readRDS("G:/HDX_sim_vol2/MArkov_sim/benchmark.RDS")
ggplot(benchmark, aes(x = Exposure, y = Mass, col = Sim)) +
geom_point() +
geom_line() +
facet_wrap(~Sequence, scales = "free_y")
benchmark1000 <- readRDS("G:/HDX_sim_vol2/MArkov_sim/benchmark1000.RDS")
benchmark1000
ggplot(benchmark1000, aes(x = Exposure, y = Mass, col = Sim)) +
geom_boxplot()
ggplot(benchmark1000, aes(x = as.character(Exposure), y = Mass, col = Sim)) +
geom_boxplot()
ggplot(benchmark1000, aes(x = as.factor(Exposure), y = Mass, col = Sim)) +
geom_boxplot()
benchmark1000 %>%
group_by(Sim, Exposure) %>%
summarise(variance = var(Mass))
benchmark1000 %>%
group_by(Sim, Exposure) %>%
summarise(variance = var(Mass), average = mean(Mass))
benchmark1000 %>%
group_by(Exposure, Sim) %>%
summarise(variance = var(Mass), average = mean(Mass))
ggplot(benchmark1000, aes(x = as.factor(Exposure), y = Mass, col = Sim)) +
geom_boxplot() +
geom_point() +
geom_line()
ggplot(benchmark1000, aes(x = as.factor(Exposure), y = Mass, col = Sim)) +
geom_boxplot()
benchmark1000 %>%
group_by(Exposure, Sim) %>%
summarise(variance = var(Mass), average = mean(Mass)) %>%
data.frame()
library(powerHDX)
library(dplyr)
library(ggplot2)
library(plyr)
params_from_file <- readRDS("all_params_new_pf.RDS")
ith_row <- 1
times <- c(5, 10, 20, 30, 40, 50, 60, 100, 300, 500, 900, 1200, 1500, 1800,
2100, 2400, 3600, 7200, 21600, 43200)
param_ppvq <- params_from_file %>%
filter(sequence == "PPVQ")
setwd("G:/HDX_sim_vol2/theo_spectra_sim")
library(powerHDX)
library(dplyr)
library(ggplot2)
library(plyr)
params_from_file <- readRDS("all_params_new_pf.RDS")
ith_row <- 1
times <- c(5, 10, 20, 30, 40, 50, 60, 100, 300, 500, 900, 1200, 1500, 1800,
2100, 2400, 3600, 7200, 21600, 43200)
param_ppvq <- params_from_file %>%
filter(sequence == "PPVQ")
param_ppvq
param <- param_ppvq[1, ]
param
debug(simulate_theoretical_spectra)
library(powerHDX)
library(dplyr)
library(ggplot2)
library(plyr)
params_from_file <- readRDS("all_params_new_pf.RDS")
ith_row <- 1
times <- c(5, 10, 20, 30, 40, 50, 60, 100, 300, 500, 900, 1200, 1500, 1800,
2100, 2400, 3600, 7200, 21600, 43200)
param_ppvq <- params_from_file %>%
filter(sequence == "PPVQ")
param_ppvq$sequence <- as.character(param_big_vec$sequence)
param_ppvq$charge <- as.numeric(as.character(param_big_vec$charge))
param <- param_ppvq[1, ]
simulate_theoretical_spectra(sequence = param[ith_row, "sequence"],
charge = param[ith_row, "charge"],
protection_factor = param[ith_row, "protection_factor"],
times = times,
pH = param[ith_row, "pH"],
temperature = 15,
n_molecules = 500,
time_step_const = param[ith_row, "step"])
times_to_record
library(powerHDX)
library(dplyr)
library(ggplot2)
library(plyr)
params_from_file <- readRDS("all_params_new_pf.RDS")
ith_row <- 1
times <- c(5, 10, 20, 30, 40, 50, 60, 100, 300, 500, 900, 1200, 1500, 1800,
2100, 2400, 3600, 7200, 21600, 43200)
param_ppvq <- params_from_file %>%
filter(sequence == "PPVQ")
param_ppvq$sequence <- as.character(param_ppvq$sequence)
param_ppvq$charge <- as.numeric(as.character(param_ppvq$charge))
param <- param_ppvq[1, ]
simulate_theoretical_spectra(sequence = param[ith_row, "sequence"],
charge = param[ith_row, "charge"],
protection_factor = param[ith_row, "protection_factor"],
times = times,
pH = param[ith_row, "pH"],
temperature = 15,
n_molecules = 500,
time_step_const = param[ith_row, "step"])
simulate_theoretical_spectra
debug(get_HD_matrices)
library(powerHDX)
library(dplyr)
library(ggplot2)
library(plyr)
params_from_file <- readRDS("all_params_new_pf.RDS")
ith_row <- 1
times <- c(5, 10, 20, 30, 40, 50, 60, 100, 300, 500, 900, 1200, 1500, 1800,
2100, 2400, 3600, 7200, 21600, 43200)
param_ppvq <- params_from_file %>%
filter(sequence == "PPVQ")
param_ppvq$sequence <- as.character(param_ppvq$sequence)
param_ppvq$charge <- as.numeric(as.character(param_ppvq$charge))
param <- param_ppvq[1, ]
simulate_theoretical_spectra(sequence = param[ith_row, "sequence"],
charge = param[ith_row, "charge"],
protection_factor = param[ith_row, "protection_factor"],
times = times,
pH = param[ith_row, "pH"],
temperature = 15,
n_molecules = 500,
time_step_const = param[ith_row, "step"])
View(separated_times)
times
length(times)
separated_times
spectra_by_ph_seq <- readRDS("G:/HDX_sim_vol2/theo_spectra_sim/spectra_by_ph_seq.RDS")
spectra_by_ph_seq
spectra_by_ph_seq <- do.call(rbind, spectra_by_ph_seq)
(dplyr)
library(dplyr)
head(spectra_by_ph_seq)
spectra_by_ph_seq$Exposure
spectra_by_ph_seq %>%
group_by(PH , Sequence, PF, Charge) %>%
summarise(how_many_like_ppvq = n(max(Exposure) < 43200))
spectra_by_ph_seq %>%
group_by(PH , Sequence, PF, Charge) %>%
summarise(how_many_like_ppvq = max(Exposure) < 43200)
spectra_by_ph_seq %>%
group_by(PH , Sequence, PF, Charge) %>%
summarise(how_many_like_ppvq = sum(max(Exposure) < 43200))
a <- spectra_by_ph_seq %>%
group_by(PH , Sequence, PF, Charge) %>%
summarise(how_many_like_ppvq = sum(max(Exposure) < 43200))
a$how_many_like_ppvq
sum(a$how_many_like_ppvq)
a
spectra_by_ph_seq %>%
group_by(PH , Sequence, PF, Charge) %>%
summarise(how_many_like_ppvq = max(Exposure) < 43200) %>%
filter(how_many_like_ppvq == TRUE)
