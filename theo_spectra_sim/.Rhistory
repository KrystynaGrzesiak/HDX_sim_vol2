library(plyr)
?.
library(shiny); runApp('C:/Users/Kanti/Desktop/praktyki/shiny-workshop-whyr2020/2_2_app.R')
runApp('C:/Users/Kanti/Desktop/praktyki/shiny-workshop-whyr2020/2_2_app.R')
runApp('C:/Users/Kanti/Desktop/praktyki/shiny-workshop-whyr2020/2_2_app.R')
runApp('C:/Users/Kanti/Desktop/praktyki/shiny-workshop-whyr2020/2_2_app.R')
runApp('C:/Users/Kanti/Desktop/praktyki/shiny-workshop-whyr2020/2_2_app.R')
runApp('C:/Users/Kanti/Desktop/praktyki/shiny-workshop-whyr2020/2_2_app.R')
runApp('C:/Users/Kanti/Desktop/praktyki/shiny-workshop-whyr2020/2_2_app.R')
runApp('C:/Users/Kanti/Desktop/praktyki/shiny-workshop-whyr2020/2_2_app.R')
runApp('C:/Users/Kanti/Desktop/praktyki/shiny-workshop-whyr2020/2_2_app.R')
library(powerHDX)
library(dplyr)
library(ggplot2)
library(plyr)
files <- list.files(path = "G:/HDX_sim_vol2/theo_spectra_sim/results", pattern = "\\.RDS$", full.names = TRUE)
files
sim_results <- do.call("rbind", lapply(files, readRDS))
params_from_file <- readRDS("all_params_new_pf.RDS")
setwd("G:/HDX_sim_vol2/theo_spectra_sim")
params_from_file <- readRDS("all_params_new_pf.RDS")
nrow(params_from_file) #all spectra #12 117 rows
length(files) #spectra from simulation #11 107 files
nrow(params_from_file) - length(files) #missing spectra
sim_results
spectra_by_ph_sequence = split(sim_results, f = sim_results[, c("Sequence", "PH")])
spectra_by_ph_sequence
saveRDS(spectra_by_ph_sequence, file = "spectra_by_ph_seq.RDS")
theo_deut_curves = lapply(spectra_by_ph_seq, function(spectrum) {
get_deuteration_curve_single_spectrum(spectrum)
})
spectra_by_ph_seq = split(sim_results, f = sim_results[, c("Sequence", "PH")])
saveRDS(spectra_by_ph_seq, file = "spectra_by_ph_seq.RDS")
theo_deut_curves = lapply(spectra_by_ph_seq, function(spectrum) {
get_deuteration_curve_single_spectrum(spectrum)
})
saveRDS(theo_deut_curves, file = "theo_deut_curves.RDS")
theo_deut_curves
if (!require(devtools)) {
install.packages('devtools')
}
devtools::install_github("hadexversum/powerHDX")
if (!require(devtools)) {
install.packages('devtools')
}
devtools::install_github("hadexversum/powerHDX")
setwd("G:/HDX_sim_vol2/theo_spectra_sim")
library(doParallel)
library(powerHDX)
setwd("~/HDX_sim_vol2/theo_spectra_sim")
load("sysdata.rda")
sim_theo_spectra = function(all_params, times) {
lapply(1:nrow(all_params), function(ith_row) {
print(paste("Simulation", ith_row, "\n"))
res = tryCatch(simulate_theoretical_spectra(sequence = all_params[ith_row, "sequence"],
charge = all_params[ith_row, "charge"],
protection_factor = all_params[ith_row, "protection_factor"],
times = times,
pH = all_params[ith_row, "pH"],
temperature = 15,
n_molecules = 500,
time_step_const = all_params[ith_row, "step"],
use_markov = TRUE),
error = function(e) {
print(e)
data.frame()})
saveRDS(res, file = paste0("./results/theo_spectrum_", all_params[ith_row, "sequence"], "_",
all_params[ith_row, "pH"], "_",
all_params[ith_row, "protection_factor"], "_",
ith_row, ".RDS", collapse = ""))
rm(res)
})
}
times = c(5, 10, 20, 30, 40, 50, 60, 100, 300, 500, 900, 1200, 1500, 1800,
2100, 2400, 3600, 7200, 21600, 43200)
all_params = readRDS("./all_params_new_pf.RDS")
all_params$sequence = as.character(all_params$sequence)
all_params$charge = as.numeric(as.character(all_params$charge))
set.seed(1410)
sim_theo_spectra(all_params, times)
library(powerHDX)
library(dplyr)
library(ggplot2)
library(plyr)
files <- list.files(path = "G:/HDX_sim_vol2/theo_spectra_sim/results", pattern = "\\.RDS$", full.names = TRUE)
sim_results <- do.call("rbind", lapply(files, readRDS))
spectra_by_ph_seq = split(sim_results, f = sim_results[, c("Sequence", "PH")])
saveRDS(spectra_by_ph_seq, file = "spectra_by_ph_seq.RDS")
theo_deut_curves = lapply(spectra_by_ph_seq, function(spectrum) {
get_deuteration_curve_single_spectrum(spectrum)
})
saveRDS(theo_deut_curves, file = "theo_deut_curves.RDS")
crv <- do.call(rbind, readRDS("theo_deut_curves.RDS"))
crv
p <- ggplot(crv, aes(x = Exposure, y = Mass, color = factor(PF),
shape = factor(PH), linetype = factor(PH))) +
geom_point() +
geom_line() +
scale_color_discrete("PF") +
theme_bw() +
theme(legend.position = "bottom") +
facet_wrap(~ Sequence, scales = "free_y")
cairo_pdf("./results/curves-without-noise.pdf", width = 50, height = 40)
p
dev.off()
