library(powerHDX)
files <- list.files(path = "\\results", pattern = "\\.rds$", full.names = TRUE)
sim_results <- do.call("rbind", lapply(files, readRDS))
spectra_by_ph_sequence = split(sim_results, f = sim_results[, c("Sequence", "PH")])
saveRDS(spectra_by_ph_sequence, file = "spectra_by_ph_seq.RDS")
setwd("G:/HDX_sim_vol2/theo_spectra_sim")
files <- list.files(path = "\\results", pattern = "\\.rds$", full.names = TRUE)
files <- list.files(path = "~\results", pattern = "\\.rds$", full.names = TRUE)
files <- list.files(path = "~/results", pattern = "\\.rds$", full.names = TRUE)
setwd("G:/HDX_sim_vol2/theo_spectra_sim")
files <- list.files(path = "G:/HDX_sim_vol2/theo_spectra_sim/results", pattern = "\\.rds$", full.names = TRUE)
setwd("G:/HDX_sim_vol2/theo_spectra_sim")
spectra_by_ph_sequence = readRDS("spectra_by_ph_seq.RDS")
length(spectra_by_ph_sequence)
files <- list.files(path = "G:/HDX_sim_vol2/theo_spectra_sim/results", pattern = "\\.rds$", full.names = TRUE)
files
spectra_by_ph_sequence
library(powerHDX)
a = get_deuteration_curves_from_spectra(spectra_by_ph_sequence)
a = powerHDX::get_deuteration_curves_from_spectra(spectra_by_ph_sequence)
if (!require(devtools)) {
install.packages('devtools')
}
devtools::install_github("hadexversum/powerHDX")
detach("package:powerHDX", unload = TRUE)
if (!require(devtools)) {
install.packages('devtools')
}
devtools::install_github("hadexversum/powerHDX")
library(powerHDX)
remove.packages("powerHDX", lib="~/R/win-library/4.0")
if (!require(devtools)) {
install.packages('devtools')
}
devtools::install_github("hadexversum/powerHDX")
if (!require(devtools)) {
install.packages('devtools')
}
devtools::install_github("hadexversum/powerHDX")
Sys.setenv(R_INSTALL_STAGED = FALSE)
if (!require(devtools)) {
install.packages('devtools')
}
devtools::install_github("hadexversum/powerHDX")
library(powerHDX)
files <- list.files(path = "G:/HDX_sim_vol2/theo_spectra_sim/results", pattern = "\\.rds$", full.names = TRUE)
sim_results <- do.call("rbind", lapply(files, readRDS))
setwd("G:/HDX_sim_vol2/theo_spectra_sim")
files <- list.files(path = "G:/HDX_sim_vol2/theo_spectra_sim/results", pattern = "\\.rds$", full.names = TRUE)
spectra_by_ph_sequence = readRDS("spectra_by_ph_seq.RDS")
files <- list.files(path = "~//results", pattern = "\\.rds$", full.names = TRUE)
files <- list.files(path = ".//results", pattern = "\\.rds$", full.names = TRUE)
files <- list.files(path = "../results", pattern = "\\.rds$", full.names = TRUE)
a = powerHDX::get_deuteration_curves_from_spectra(spectra_by_ph_sequence)
if (!require(devtools)) {
install.packages('devtools')
}
devtools::install_github("hadexversum/powerHDX")
a = powerHDX::get_deuteration_curves_from_spectra(spectra_by_ph_sequence)
a
spectra_by_ph_sequence
setwd("G:/HDX_sim_vol2")
by_ph_sequence = readRDS("by_ph_seq.RDS")
by_ph_sequence
powerHDX::get_deuteration_curves_from_spectra(by_ph_sequence)
spectra_by_ph_sequence[[1]]
if (!require(devtools)) {
install.packages('devtools')
}
devtools::install_github("hadexversum/powerHDX")
if (!require(devtools)) {
install.packages('devtools')
}
devtools::install_github("hadexversum/powerHDX")
if (!require(devtools)) {
install.packages('devtools')
}
devtools::install_github("hadexversum/powerHDX")
if (!require(devtools)) {
install.packages('devtools')
}
devtools::install_github("hadexversum/powerHDX")
library(powerHDX)
a = powerHDX::get_deuteration_curves_from_spectra(by_ph_sequence)
theo_deuteration_curves = lapply(spectra_by_ph_seq, function(spectrum) {
powerHDX::get_deuteration_curve_single_spectrum(spectrum)
})
spectra_by_ph_seq = readRDS("spectra_by_ph_seq.RDS")
setwd("G:/HDX_sim_vol2/theo_spectra_sim")
spectra_by_ph_seq = readRDS("spectra_by_ph_seq.RDS")
theo_deuteration_curves = lapply(spectra_by_ph_seq, function(spectrum) {
powerHDX::get_deuteration_curve_single_spectrum(spectrum)
})
theo_deuteration_curves
files <- list.files(path = "~/results", pattern = "\\.rds$", full.names = TRUE)
files
files <- list.files(path = "/results", pattern = "\\.rds$", full.names = TRUE)
files
files <- list.files(path = "//results", pattern = "\\.rds$", full.names = TRUE)
files
files <- list.files(path = "\\results", pattern = "\\.rds$", full.names = TRUE)
getwd()
files <- list.files(path = "G:/HDX_sim_vol2/theo_spectra_sim/results", pattern = "\\.rds$", full.names = TRUE)
files <- list.files(path = "\\results", pattern = "\\.rds$", full.names = TRUE)
files <- list.files(path = "\\results", pattern = "\\.RDS$", full.names = TRUE)
setwd("G:/HDX_sim_vol2/theo_spectra_sim")
files <- list.files(path = "G:/HDX_sim_vol2/theo_spectra_sim", pattern = "\\.RDS$", full.names = TRUE)
files
files <- list.files(path = "G:/HDX_sim_vol2/theo_spectra_sim/results", pattern = "\\.RDS$", full.names = TRUE)
files <- list.files(path = "/results", pattern = "\\.RDS$", full.names = TRUE)
files <- list.files(path = "G:/HDX_sim_vol2/theo_spectra_sim/results", pattern = "\\.RDS$", full.names = TRUE)
sim_results <- do.call("rbind", lapply(files, readRDS))
spectra_by_ph_sequence = split(sim_results, f = sim_results[, c("Sequence", "PH")])
saveRDS(spectra_by_ph_sequence, file = "spectra_by_ph_seq.RDS")
theo_deut_curves = lapply(spectra_by_ph_seq, function(spectrum) {
get_deuteration_curve_single_spectrum(spectrum)
})
saveRDS(theo_deut_curves, file = "theo_deut_curves.RDS")
theo_deut_curves[[1]]
theo_deut_curves[[1]] %>%
ggplot(aes(x = Exposure, y = Mass, col = PF)) +
geom_line()
library(dplyr)
theo_deut_curves[[1]] %>%
ggplot(aes(x = Exposure, y = Mass, col = PF)) +
geom_line()
library(ggplot2)
theo_deut_curves[[1]] %>%
ggplot(aes(x = Exposure, y = Mass, col = PF)) +
geom_line()
theo_deut_curves[[1]] %>%
ggplot(aes(x = Exposure, y = Mass, col = as.character(PF))) +
geom_line()
