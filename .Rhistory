library(powerHDX)
noisy_curves = get_noisy_deuteration_curves(spectrum, reference = 1, compare_pairs = FALSE)
library(powerHDX)
load("sysdata.rda")
times = c(5, 10, 20, 30, 40, 50, 60, 100, 300, 500, 900, 1200, 1500, 1800,
2100, 2400, 3600, 7200, 21600, 43200)
params = readRDS("./all_params.RDS")[1:2, ]
params$sequence = as.character(all_params$sequence)
params$charge = as.numeric(as.character(all_params$charge))
setwd("G:/HDX_sim_vol2")
params = readRDS("./all_params.RDS")[1:2, ]
params$sequence = as.character(all_params$sequence)
params$charge = as.numeric(as.character(all_params$charge))
spectra_list = lapply(1:nrow(params), function(ith_row) {
simulate_theoretical_spectra(sequence = params[ith_row, "sequence"],
charge = params[ith_row, "charge"],
protection_factor = params[ith_row, "protection_factor"],
times = times,
pH = params[ith_row, "pH"],
temperature = 15,
n_molecules = 100,
time_step_const = params[ith_row, "step"])
})
library(powerHDX)
load("sysdata.rda")
times = c(5, 10, 20, 30, 40, 50, 60, 100, 300, 500, 900, 1200, 1500, 1800,
2100, 2400, 3600, 7200, 21600, 43200)
params = readRDS("./all_params.RDS")[1:2, ]
params$sequence = as.character(all_params$sequence)
params$sequence = as.character(params$sequence)
params$charge = as.numeric(as.character(params$charge))
spectra_list = lapply(1:nrow(params), function(ith_row) {
simulate_theoretical_spectra(sequence = params[ith_row, "sequence"],
charge = params[ith_row, "charge"],
protection_factor = params[ith_row, "protection_factor"],
times = times,
pH = params[ith_row, "pH"],
temperature = 15,
n_molecules = 100,
time_step_const = params[ith_row, "step"])
})
noisy_curves = get_noisy_deuteration_curves(spectrum, reference = 1, compare_pairs = FALSE)
params = readRDS("./all_params.RDS")[10, ]
params$sequence = as.character(params$sequence)
params$charge = as.numeric(as.character(params$charge))
spectrum = simulate_theoretical_spectra(sequence = params[, "sequence"],
charge = params[, "charge"],
protection_factor = params[, "protection_factor"],
times = times,
pH = params[, "pH"],
temperature = 15,
n_molecules = 100,
time_step_const = params[, "step"])
spectrum
noisy_curves = get_noisy_deuteration_curves(spectrum, reference = 1, compare_pairs = FALSE)
noisy_curves
noisy_curves = get_noisy_deuteration_curves(spectra_list, reference = 1, compare_pairs = FALSE)
spectrum
noisy_curves
by_ph_seq
by_ph_seq <- readRDS("G:/kodyHDX/HDX_sim/deploy_power_sim/by_ph_seq.RDS")
by_ph_seq
by_ph_seq[[1]]
spectrum = by_ph_seq[[1]]
i = 1
for (i in 1:nrow(time_constant)) {
if (is.na(time_constant[i, "per_run_deviations"])) {
per_run_deviation = NULL
} else {
per_run_deviation = time_constant[i, "per_run_deviations"]
}
spectrum = spectrum[Exposure %in% possible_times[[time_constant[i, "n_timepoints"]]], ]
tests_results = tryCatch({
noisy_curves = get_noisy_deuteration_curves(spectrum, reference = 1,
n_runs = time_constant[i, "num_reps"],
mass_deviations = time_constant[i, "mass_deviations"],
per_run_deviations = per_run_deviation)
calculate_hdx_power(noisy_curves,
list(deuteros, lme_model, auc_test, memhdx_model),
0.05, summarized = FALSE)
}, error = function(e) data.table::data.table())
seq = as.character(unique(noisy_curves[[1]][[1]]$Sequence))
n_runs = time_constant[i, "num_reps"]
n_times = length(possible_times[[time_constant[i, "n_timepoints"]]])
mass_deviations = time_constant[i, "mass_deviations"]
saveRDS(tests_results, file = paste("./results/", seq, n_runs, n_times, mass_deviations, per_run_deviation, ".RDS", sep = "_"))
}
time_constant <- readRDS("G:/kodyHDX/HDX_sim/deploy_power_sim/time_constant.RDS")
for (i in 1:nrow(time_constant)) {
if (is.na(time_constant[i, "per_run_deviations"])) {
per_run_deviation = NULL
} else {
per_run_deviation = time_constant[i, "per_run_deviations"]
}
spectrum = spectrum[Exposure %in% possible_times[[time_constant[i, "n_timepoints"]]], ]
tests_results = tryCatch({
noisy_curves = get_noisy_deuteration_curves(spectrum, reference = 1,
n_runs = time_constant[i, "num_reps"],
mass_deviations = time_constant[i, "mass_deviations"],
per_run_deviations = per_run_deviation)
calculate_hdx_power(noisy_curves,
list(deuteros, lme_model, auc_test, memhdx_model),
0.05, summarized = FALSE)
}, error = function(e) data.table::data.table())
seq = as.character(unique(noisy_curves[[1]][[1]]$Sequence))
n_runs = time_constant[i, "num_reps"]
n_times = length(possible_times[[time_constant[i, "n_timepoints"]]])
mass_deviations = time_constant[i, "mass_deviations"]
saveRDS(tests_results, file = paste("./results/", seq, n_runs, n_times, mass_deviations, per_run_deviation, ".RDS", sep = "_"))
}
library(data.table)
library(powerHDX)
library(parallel)
data.table::setDTthreads(1)
time_constant = readRDS("./time_constant.RDS")
by_ph_seq = readRDS("./by_ph_seq.RDS")
possible_times = list(
c(0, 10, 60, 300, 500, 1800, 7200, 21600, 43200),
c(0, 5, 10, 60, 100, 300, 500, 1200, 1800, 2400, 3600, 7200, 21600, 432000)
)
time_varying_mass_deviations = list(
c(10, 50, 50, 30, 30, 30, 20, 10, 10),
c(10, 50, 50, 50, 50, 30, 20, 20, 20, 20, 20, 10, 10, 10)
)
for (i in 1:nrow(time_constant)) {
if (is.na(time_constant[i, "per_run_deviations"])) {
per_run_deviation = NULL
} else {
per_run_deviation = time_constant[i, "per_run_deviations"]
}
spectrum = spectrum[Exposure %in% possible_times[[time_constant[i, "n_timepoints"]]], ]
tests_results = tryCatch({
noisy_curves = get_noisy_deuteration_curves(spectrum, reference = 1,
n_runs = time_constant[i, "num_reps"],
mass_deviations = time_constant[i, "mass_deviations"],
per_run_deviations = per_run_deviation)
calculate_hdx_power(noisy_curves,
list(deuteros, lme_model, auc_test, memhdx_model),
0.05, summarized = FALSE)
}, error = function(e) data.table::data.table())
seq = as.character(unique(noisy_curves[[1]][[1]]$Sequence))
n_runs = time_constant[i, "num_reps"]
n_times = length(possible_times[[time_constant[i, "n_timepoints"]]])
mass_deviations = time_constant[i, "mass_deviations"]
saveRDS(tests_results, file = paste("./results/", seq, n_runs, n_times, mass_deviations, per_run_deviation, ".RDS", sep = "_"))
}
possible_times = list(
c(0, 10, 60, 300, 500),
c(0, 5, 10, 60, 100, 300, 500, 1200)
)
time_varying_mass_deviations = list(
c(10, 50, 50, 30, 30),
c(10, 50, 50, 50, 50, 30, 20, 20)
)
get_power = function(spectra_list, n_cores) {
mclapply(
spectra_list, function(spectrum) {
for (i in 1:nrow(time_constant)) {
if (is.na(time_constant[i, "per_run_deviations"])) {
per_run_deviation = NULL
} else {
per_run_deviation = time_constant[i, "per_run_deviations"]
}
spectrum = spectrum[Exposure %in% possible_times[[time_constant[i, "n_timepoints"]]], ]
tests_results = tryCatch({
noisy_curves = get_noisy_deuteration_curves(spectrum, reference = 1,
n_runs = time_constant[i, "num_reps"],
mass_deviations = time_constant[i, "mass_deviations"],
per_run_deviations = per_run_deviation)
calculate_hdx_power(noisy_curves,
list(deuteros, lme_model, auc_test, memhdx_model),
0.05, summarized = FALSE)
}, error = function(e) data.table::data.table())
seq = as.character(unique(noisy_curves[[1]][[1]]$Sequence))
n_runs = time_constant[i, "num_reps"]
n_times = length(possible_times[[time_constant[i, "n_timepoints"]]])
mass_deviations = time_constant[i, "mass_deviations"]
saveRDS(tests_results, file = paste("./results/", seq, n_runs, n_times, mass_deviations, per_run_deviation, ".RDS", sep = "_"))
}
}, mc.cores = n_cores
)
}
for (i in 1:nrow(time_constant)) {
if (is.na(time_constant[i, "per_run_deviations"])) {
per_run_deviation = NULL
} else {
per_run_deviation = time_constant[i, "per_run_deviations"]
}
spectrum = spectrum[Exposure %in% possible_times[[time_constant[i, "n_timepoints"]]], ]
tests_results = tryCatch({
noisy_curves = get_noisy_deuteration_curves(spectrum, reference = 1,
n_runs = time_constant[i, "num_reps"],
mass_deviations = time_constant[i, "mass_deviations"],
per_run_deviations = per_run_deviation)
calculate_hdx_power(noisy_curves,
list(deuteros, lme_model, auc_test, memhdx_model),
0.05, summarized = FALSE)
}, error = function(e) data.table::data.table())
seq = as.character(unique(noisy_curves[[1]][[1]]$Sequence))
n_runs = time_constant[i, "num_reps"]
n_times = length(possible_times[[time_constant[i, "n_timepoints"]]])
mass_deviations = time_constant[i, "mass_deviations"]
saveRDS(tests_results, file = paste("./results/", seq, n_runs, n_times, mass_deviations, per_run_deviation, ".RDS", sep = "_"))
}
for (i in 1:nrow(time_constant)) {
if (is.na(time_constant[i, "per_run_deviations"])) {
per_run_deviation = NULL
} else {
per_run_deviation = time_constant[i, "per_run_deviations"]
}
spectrum = spectrum[Exposure %in% possible_times[[time_constant[i, "n_timepoints"]]], ]
tests_results = tryCatch({
noisy_curves = get_noisy_deuteration_curves(spectrum, reference = 1,
n_runs = time_constant[i, "num_reps"],
mass_deviations = time_constant[i, "mass_deviations"],
per_run_deviations = per_run_deviation)
calculate_hdx_power(noisy_curves,
list(deuteros, lme_model, auc_test, memhdx_model),
0.05, summarized = FALSE)
}, error = function(e) data.table::data.table())
seq = as.character(unique(noisy_curves[[1]][[1]]$Sequence))
n_runs = time_constant[i, "num_reps"]
n_times = length(possible_times[[time_constant[i, "n_timepoints"]]])
mass_deviations = time_constant[i, "mass_deviations"]
saveRDS(tests_results, file = paste("./results/ppp", seq, n_runs, n_times, mass_deviations, per_run_deviation, ".RDS", sep = "_"))
}
i = 1
if (is.na(time_constant[i, "per_run_deviations"])) {
per_run_deviation = NULL
} else {
per_run_deviation = time_constant[i, "per_run_deviations"]
}
spectrum = spectrum[Exposure %in% possible_times[[time_constant[i, "n_timepoints"]]], ]
tests_results = tryCatch({
noisy_curves = get_noisy_deuteration_curves(spectrum, reference = 1,
n_runs = time_constant[i, "num_reps"],
mass_deviations = time_constant[i, "mass_deviations"],
per_run_deviations = per_run_deviation)
calculate_hdx_power(noisy_curves,
list(deuteros, lme_model, auc_test, memhdx_model),
0.05, summarized = FALSE)
}, error = function(e) data.table::data.table())
calculate_hdx_power(noisy_curves,
list(deuteros),
0.05, summarized = FALSE)
tests_results = tryCatch({
noisy_curves = get_noisy_deuteration_curves(spectrum, reference = 1,
n_runs = time_constant[i, "num_reps"],
mass_deviations = time_constant[i, "mass_deviations"],
per_run_deviations = per_run_deviation)
calculate_hdx_power(noisy_curves,
list(deuteros),
0.05, summarized = FALSE)
}, error = function(e) data.table::data.table())
tests_results
tests_results
tests_results
spectrum = simulate_theoretical_spectra(sequence = params[, "sequence"],
charge = params[, "charge"],
protection_factor = params[, "protection_factor"],
times = times,
pH = params[, "pH"],
temperature = 15,
n_molecules = 100,
time_step_const = params[, "step"])
for (i in 1:nrow(time_constant)) {
if (is.na(time_constant[i, "per_run_deviations"])) {
per_run_deviation = NULL
} else {
per_run_deviation = time_constant[i, "per_run_deviations"]
}
spectrum = spectrum[Exposure %in% possible_times[[time_constant[i, "n_timepoints"]]], ]
tests_results = tryCatch({
noisy_curves = get_noisy_deuteration_curves(spectrum, reference = 1,
n_runs = time_constant[i, "num_reps"],
mass_deviations = time_constant[i, "mass_deviations"],
per_run_deviations = per_run_deviation)
calculate_hdx_power(noisy_curves,
list(deuteros),
0.05, summarized = FALSE)
}, error = function(e) data.table::data.table())
seq = as.character(unique(noisy_curves[[1]][[1]]$Sequence))
n_runs = time_constant[i, "num_reps"]
n_times = length(possible_times[[time_constant[i, "n_timepoints"]]])
mass_deviations = time_constant[i, "mass_deviations"]
saveRDS(tests_results, file = paste("./results/", seq, n_runs, n_times, mass_deviations, per_run_deviation, ".RDS", sep = "_"))
}
tests_results
spectrum
by_ph_seq[[1]]
spectrum = data.table(spectrum)
spectrum
by_ph_seq[[1]]
by_ph_seq
readRDS("./all_params.RDS")
params = readRDS("./all_params.RDS")[1:2, ]
params$sequence = as.character(params$sequence)
params$charge = as.numeric(as.character(params$charge))
spectra_list = lapply(1:nrow(params), function(ith_row) {
simulate_theoretical_spectra(sequence = params[ith_row, "sequence"],
charge = params[ith_row, "charge"],
protection_factor = params[ith_row, "protection_factor"],
times = times,
pH = params[ith_row, "pH"],
temperature = 15,
n_molecules = 100,
time_step_const = params[ith_row, "step"])
})
spectra_list
rbindlist(spectra_list)
params = readRDS("./all_params.RDS")[1:100, ]
params$sequence = as.character(params$sequence)
params$charge = as.numeric(as.character(params$charge))
spectra_list = lapply(1:nrow(params), function(ith_row) {
simulate_theoretical_spectra(sequence = params[ith_row, "sequence"],
charge = params[ith_row, "charge"],
protection_factor = params[ith_row, "protection_factor"],
times = times,
pH = params[ith_row, "pH"],
temperature = 15,
n_molecules = 100,
time_step_const = params[ith_row, "step"])
})
params = readRDS("./all_params.RDS")[1:10, ]
params$sequence = as.character(params$sequence)
params$charge = as.numeric(as.character(params$charge))
spectra_list = lapply(1:nrow(params), function(ith_row) {
simulate_theoretical_spectra(sequence = params[ith_row, "sequence"],
charge = params[ith_row, "charge"],
protection_factor = params[ith_row, "protection_factor"],
times = times,
pH = params[ith_row, "pH"],
temperature = 15,
n_molecules = 100,
time_step_const = params[ith_row, "step"])
})
rbindlist(spectra_list)
by_ph_seq
spectra_list
rbindlist(spectra_list)
s = rbindlist(spectra_list)
split(s, s$PH)
spectra_list = split(s, s$PH)
noisy_curves = get_noisy_deuteration_curves(spectra_list, reference = 1, compare_pairs = FALSE)
s = rbindlist(spectra_list)
spectra_list = split(s, s$PH)
noisy_curves = get_noisy_deuteration_curves(spectra_list, reference = 1, compare_pairs = FALSE)
noisy_curves = get_noisy_deuteration_curves(spectra_list, reference = 1)
spectra_list = split(s, s$Sequence)
spectra_list
noisy_curves = get_noisy_deuteration_curves(spectra_list, reference = 1, compare_pairs = FALSE)
spectrum = spectra_list[[1]]
spectrum = spectrum[Exposure %in% possible_times[[time_constant[i, "n_timepoints"]]], ]
noisy_curves = get_noisy_deuteration_curves(spectra_list, reference = 1, compare_pairs = FALSE)
noisy_curves = get_noisy_deuteration_curves(spectrum, reference = 1, compare_pairs = FALSE)
noisy_curves
power = lapply(spectra_list, function(spectrum) {
for (i in 1:nrow(time_constant)) {
if (is.na(time_constant[i, "per_run_deviations"])) {
per_run_deviation = NULL
} else {
per_run_deviation = time_constant[i, "per_run_deviations"]
}
spectrum = spectrum[Exposure %in% possible_times[[time_constant[i, "n_timepoints"]]], ]
tests_results = tryCatch({
noisy_curves = get_noisy_deuteration_curves(spectrum, reference = 1, compare_pairs = FALSE,
n_runs = time_constant[i, "num_reps"],
mass_deviations = time_constant[i, "mass_deviations"],
per_run_deviations = per_run_deviation)
calculate_hdx_power(noisy_curves,
list(deuteros, lme_model, auc_test, memhdx_model),
0.05, summarized = FALSE)
})
}
})
power = lapply(spectra_list, function(spectrum) {
for (i in 1:nrow(time_constant)) {
if (is.na(time_constant[i, "per_run_deviations"])) {
per_run_deviation = NULL
} else {
per_run_deviation = time_constant[i, "per_run_deviations"]
}
spectrum = spectrum[Exposure %in% possible_times[[time_constant[i, "n_timepoints"]]], ]
tests_results = tryCatch({
noisy_curves = get_noisy_deuteration_curves(spectrum, reference = 1, compare_pairs = FALSE,
n_runs = time_constant[i, "num_reps"],
mass_deviations = time_constant[i, "mass_deviations"],
per_run_deviations = per_run_deviation)
calculate_hdx_power(noisy_curves,
list(deuteros),
0.05, summarized = FALSE)
})
}
})
power
`_AAHL_2_5_5__` <- readRDS("G:/HDX_sim_vol2/results/_AAHL_2_5_5__.RDS")
View(`_AAHL_2_5_5__`)
setwd("G:/HDX_sim_vol2")
