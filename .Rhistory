0.05, summarized = FALSE)
}, error = function(e) data.table::data.table())
seq = as.character(unique(noisy_curves[[1]][[1]]$Sequence))
n_runs = time_constant[i, "num_reps"]
n_times = length(possible_times[[time_constant[i, "n_timepoints"]]])
mass_deviations = time_constant[i, "mass_deviations"]
saveRDS(tests_results, file = paste("./results/", seq, n_runs, n_times, mass_deviations, per_run_deviation, ".RDS", sep = "_"))
}
possible_times = list(
c(0, 10, 60, 300, 500),
c(0, 5, 10, 60, 100, 300, 500, 1200)
)
time_varying_mass_deviations = list(
c(10, 50, 50, 30, 30),
c(10, 50, 50, 50, 50, 30, 20, 20)
)
get_power = function(spectra_list, n_cores) {
mclapply(
spectra_list, function(spectrum) {
for (i in 1:nrow(time_constant)) {
if (is.na(time_constant[i, "per_run_deviations"])) {
per_run_deviation = NULL
} else {
per_run_deviation = time_constant[i, "per_run_deviations"]
}
spectrum = spectrum[Exposure %in% possible_times[[time_constant[i, "n_timepoints"]]], ]
tests_results = tryCatch({
noisy_curves = get_noisy_deuteration_curves(spectrum, reference = 1,
n_runs = time_constant[i, "num_reps"],
mass_deviations = time_constant[i, "mass_deviations"],
per_run_deviations = per_run_deviation)
calculate_hdx_power(noisy_curves,
list(deuteros, lme_model, auc_test, memhdx_model),
0.05, summarized = FALSE)
}, error = function(e) data.table::data.table())
seq = as.character(unique(noisy_curves[[1]][[1]]$Sequence))
n_runs = time_constant[i, "num_reps"]
n_times = length(possible_times[[time_constant[i, "n_timepoints"]]])
mass_deviations = time_constant[i, "mass_deviations"]
saveRDS(tests_results, file = paste("./results/", seq, n_runs, n_times, mass_deviations, per_run_deviation, ".RDS", sep = "_"))
}
}, mc.cores = n_cores
)
}
for (i in 1:nrow(time_constant)) {
if (is.na(time_constant[i, "per_run_deviations"])) {
per_run_deviation = NULL
} else {
per_run_deviation = time_constant[i, "per_run_deviations"]
}
spectrum = spectrum[Exposure %in% possible_times[[time_constant[i, "n_timepoints"]]], ]
tests_results = tryCatch({
noisy_curves = get_noisy_deuteration_curves(spectrum, reference = 1,
n_runs = time_constant[i, "num_reps"],
mass_deviations = time_constant[i, "mass_deviations"],
per_run_deviations = per_run_deviation)
calculate_hdx_power(noisy_curves,
list(deuteros, lme_model, auc_test, memhdx_model),
0.05, summarized = FALSE)
}, error = function(e) data.table::data.table())
seq = as.character(unique(noisy_curves[[1]][[1]]$Sequence))
n_runs = time_constant[i, "num_reps"]
n_times = length(possible_times[[time_constant[i, "n_timepoints"]]])
mass_deviations = time_constant[i, "mass_deviations"]
saveRDS(tests_results, file = paste("./results/", seq, n_runs, n_times, mass_deviations, per_run_deviation, ".RDS", sep = "_"))
}
for (i in 1:nrow(time_constant)) {
if (is.na(time_constant[i, "per_run_deviations"])) {
per_run_deviation = NULL
} else {
per_run_deviation = time_constant[i, "per_run_deviations"]
}
spectrum = spectrum[Exposure %in% possible_times[[time_constant[i, "n_timepoints"]]], ]
tests_results = tryCatch({
noisy_curves = get_noisy_deuteration_curves(spectrum, reference = 1,
n_runs = time_constant[i, "num_reps"],
mass_deviations = time_constant[i, "mass_deviations"],
per_run_deviations = per_run_deviation)
calculate_hdx_power(noisy_curves,
list(deuteros, lme_model, auc_test, memhdx_model),
0.05, summarized = FALSE)
}, error = function(e) data.table::data.table())
seq = as.character(unique(noisy_curves[[1]][[1]]$Sequence))
n_runs = time_constant[i, "num_reps"]
n_times = length(possible_times[[time_constant[i, "n_timepoints"]]])
mass_deviations = time_constant[i, "mass_deviations"]
saveRDS(tests_results, file = paste("./results/ppp", seq, n_runs, n_times, mass_deviations, per_run_deviation, ".RDS", sep = "_"))
}
i = 1
if (is.na(time_constant[i, "per_run_deviations"])) {
per_run_deviation = NULL
} else {
per_run_deviation = time_constant[i, "per_run_deviations"]
}
spectrum = spectrum[Exposure %in% possible_times[[time_constant[i, "n_timepoints"]]], ]
tests_results = tryCatch({
noisy_curves = get_noisy_deuteration_curves(spectrum, reference = 1,
n_runs = time_constant[i, "num_reps"],
mass_deviations = time_constant[i, "mass_deviations"],
per_run_deviations = per_run_deviation)
calculate_hdx_power(noisy_curves,
list(deuteros, lme_model, auc_test, memhdx_model),
0.05, summarized = FALSE)
}, error = function(e) data.table::data.table())
calculate_hdx_power(noisy_curves,
list(deuteros),
0.05, summarized = FALSE)
tests_results = tryCatch({
noisy_curves = get_noisy_deuteration_curves(spectrum, reference = 1,
n_runs = time_constant[i, "num_reps"],
mass_deviations = time_constant[i, "mass_deviations"],
per_run_deviations = per_run_deviation)
calculate_hdx_power(noisy_curves,
list(deuteros),
0.05, summarized = FALSE)
}, error = function(e) data.table::data.table())
tests_results
tests_results
tests_results
spectrum = simulate_theoretical_spectra(sequence = params[, "sequence"],
charge = params[, "charge"],
protection_factor = params[, "protection_factor"],
times = times,
pH = params[, "pH"],
temperature = 15,
n_molecules = 100,
time_step_const = params[, "step"])
for (i in 1:nrow(time_constant)) {
if (is.na(time_constant[i, "per_run_deviations"])) {
per_run_deviation = NULL
} else {
per_run_deviation = time_constant[i, "per_run_deviations"]
}
spectrum = spectrum[Exposure %in% possible_times[[time_constant[i, "n_timepoints"]]], ]
tests_results = tryCatch({
noisy_curves = get_noisy_deuteration_curves(spectrum, reference = 1,
n_runs = time_constant[i, "num_reps"],
mass_deviations = time_constant[i, "mass_deviations"],
per_run_deviations = per_run_deviation)
calculate_hdx_power(noisy_curves,
list(deuteros),
0.05, summarized = FALSE)
}, error = function(e) data.table::data.table())
seq = as.character(unique(noisy_curves[[1]][[1]]$Sequence))
n_runs = time_constant[i, "num_reps"]
n_times = length(possible_times[[time_constant[i, "n_timepoints"]]])
mass_deviations = time_constant[i, "mass_deviations"]
saveRDS(tests_results, file = paste("./results/", seq, n_runs, n_times, mass_deviations, per_run_deviation, ".RDS", sep = "_"))
}
tests_results
spectrum
by_ph_seq[[1]]
spectrum = data.table(spectrum)
spectrum
by_ph_seq[[1]]
by_ph_seq
readRDS("./all_params.RDS")
params = readRDS("./all_params.RDS")[1:2, ]
params$sequence = as.character(params$sequence)
params$charge = as.numeric(as.character(params$charge))
spectra_list = lapply(1:nrow(params), function(ith_row) {
simulate_theoretical_spectra(sequence = params[ith_row, "sequence"],
charge = params[ith_row, "charge"],
protection_factor = params[ith_row, "protection_factor"],
times = times,
pH = params[ith_row, "pH"],
temperature = 15,
n_molecules = 100,
time_step_const = params[ith_row, "step"])
})
spectra_list
rbindlist(spectra_list)
params = readRDS("./all_params.RDS")[1:100, ]
params$sequence = as.character(params$sequence)
params$charge = as.numeric(as.character(params$charge))
spectra_list = lapply(1:nrow(params), function(ith_row) {
simulate_theoretical_spectra(sequence = params[ith_row, "sequence"],
charge = params[ith_row, "charge"],
protection_factor = params[ith_row, "protection_factor"],
times = times,
pH = params[ith_row, "pH"],
temperature = 15,
n_molecules = 100,
time_step_const = params[ith_row, "step"])
})
params = readRDS("./all_params.RDS")[1:10, ]
params$sequence = as.character(params$sequence)
params$charge = as.numeric(as.character(params$charge))
spectra_list = lapply(1:nrow(params), function(ith_row) {
simulate_theoretical_spectra(sequence = params[ith_row, "sequence"],
charge = params[ith_row, "charge"],
protection_factor = params[ith_row, "protection_factor"],
times = times,
pH = params[ith_row, "pH"],
temperature = 15,
n_molecules = 100,
time_step_const = params[ith_row, "step"])
})
rbindlist(spectra_list)
by_ph_seq
spectra_list
rbindlist(spectra_list)
s = rbindlist(spectra_list)
split(s, s$PH)
spectra_list = split(s, s$PH)
noisy_curves = get_noisy_deuteration_curves(spectra_list, reference = 1, compare_pairs = FALSE)
s = rbindlist(spectra_list)
spectra_list = split(s, s$PH)
noisy_curves = get_noisy_deuteration_curves(spectra_list, reference = 1, compare_pairs = FALSE)
noisy_curves = get_noisy_deuteration_curves(spectra_list, reference = 1)
spectra_list = split(s, s$Sequence)
spectra_list
noisy_curves = get_noisy_deuteration_curves(spectra_list, reference = 1, compare_pairs = FALSE)
spectrum = spectra_list[[1]]
spectrum = spectrum[Exposure %in% possible_times[[time_constant[i, "n_timepoints"]]], ]
noisy_curves = get_noisy_deuteration_curves(spectra_list, reference = 1, compare_pairs = FALSE)
noisy_curves = get_noisy_deuteration_curves(spectrum, reference = 1, compare_pairs = FALSE)
noisy_curves
power = lapply(spectra_list, function(spectrum) {
for (i in 1:nrow(time_constant)) {
if (is.na(time_constant[i, "per_run_deviations"])) {
per_run_deviation = NULL
} else {
per_run_deviation = time_constant[i, "per_run_deviations"]
}
spectrum = spectrum[Exposure %in% possible_times[[time_constant[i, "n_timepoints"]]], ]
tests_results = tryCatch({
noisy_curves = get_noisy_deuteration_curves(spectrum, reference = 1, compare_pairs = FALSE,
n_runs = time_constant[i, "num_reps"],
mass_deviations = time_constant[i, "mass_deviations"],
per_run_deviations = per_run_deviation)
calculate_hdx_power(noisy_curves,
list(deuteros, lme_model, auc_test, memhdx_model),
0.05, summarized = FALSE)
})
}
})
power = lapply(spectra_list, function(spectrum) {
for (i in 1:nrow(time_constant)) {
if (is.na(time_constant[i, "per_run_deviations"])) {
per_run_deviation = NULL
} else {
per_run_deviation = time_constant[i, "per_run_deviations"]
}
spectrum = spectrum[Exposure %in% possible_times[[time_constant[i, "n_timepoints"]]], ]
tests_results = tryCatch({
noisy_curves = get_noisy_deuteration_curves(spectrum, reference = 1, compare_pairs = FALSE,
n_runs = time_constant[i, "num_reps"],
mass_deviations = time_constant[i, "mass_deviations"],
per_run_deviations = per_run_deviation)
calculate_hdx_power(noisy_curves,
list(deuteros),
0.05, summarized = FALSE)
})
}
})
power
`_AAHL_2_5_5__` <- readRDS("G:/HDX_sim_vol2/results/_AAHL_2_5_5__.RDS")
View(`_AAHL_2_5_5__`)
setwd("G:/HDX_sim_vol2")
library(doParallel)
library(powerHDX)
setwd("~/HDX_sim_vol2")
load("sysdata.rda")
sim_theo_spectra = function(all_params, n_cpus, times) {
all_params$cpu = sample(1:n_cpus, nrow(all_params), replace = TRUE)
all_params = split(all_params, all_params$cpu)
mclapply(all_params, function(df_per_cpu) {
df_per_cpu$sequence = as.character(df_per_cpu$sequence)
df_per_cpu$charge = as.numeric(as.character(df_per_cpu$charge))
lapply(1:nrow(df_per_cpu), function(ith_row) {
print(paste("Simulation", ith_row, "\n"))
res = tryCatch(simulate_theoretical_spectra(sequence = df_per_cpu[ith_row, "sequence"],
charge = df_per_cpu[ith_row, "charge"],
pf = df_per_cpu[ith_row, "protection_factor"],
times = times,
ph = df_per_cpu[ith_row, "pH"],
temperature = 15,
n_molecules = 500,
time_step_const = df_per_cpu[ith_row, "step"]),
error = function(e) data.frame())
print("halo")
saveRDS(res, file = paste0("./results/theo_spectrum_", df_per_cpu[ith_row, "sequence"], "_",
df_per_cpu[ith_row, "pH"], "_",
df_per_cpu[ith_row, "protection_factor"], "_",
ith_row, ".RDS", collapse = ""))
rm(res)
})
}, mc.cores = n_cpus)
}
times = c(5, 10, 20, 30, 40)
all_params = readRDS("./all_params.RDS")[1, ]
all_params$sequence = as.character(all_params$sequence)
all_params$charge = as.numeric(as.character(all_params$charge))
cores = detectCores()
sim_theo_spectra(all_params, cores, times)
cores = 1
sim_theo_spectra(all_params, cores, times)
sim_theo_spectra = function(all_params, n_cpus, times) {
all_params$cpu = sample(1:n_cpus, nrow(all_params), replace = TRUE)
all_params = split(all_params, all_params$cpu)
mclapply(all_params, function(df_per_cpu) {
df_per_cpu$sequence = as.character(df_per_cpu$sequence)
df_per_cpu$charge = as.numeric(as.character(df_per_cpu$charge))
lapply(1:nrow(df_per_cpu), function(ith_row) {
print(paste("Simulation", ith_row, "\n"))
res = tryCatch(simulate_theoretical_spectra(sequence = df_per_cpu[ith_row, "sequence"],
charge = df_per_cpu[ith_row, "charge"],
pf = df_per_cpu[ith_row, "protection_factor"],
times = times,
ph = df_per_cpu[ith_row, "pH"],
temperature = 15,
n_molecules = 500,
time_step_const = df_per_cpu[ith_row, "step"]),
error = function(e) {
print(e)
data.frame()})
print("halo")
saveRDS(res, file = paste0("./results/theo_spectrum_", df_per_cpu[ith_row, "sequence"], "_",
df_per_cpu[ith_row, "pH"], "_",
df_per_cpu[ith_row, "protection_factor"], "_",
ith_row, ".RDS", collapse = ""))
rm(res)
})
}, mc.cores = n_cpus)
}
times = c(5, 10, 20, 30, 40)
all_params = readRDS("./all_params.RDS")[1, ]
all_params$sequence = as.character(all_params$sequence)
all_params$charge = as.numeric(as.character(all_params$charge))
cores = detectCores()
cores = 1
sim_theo_spectra(all_params, cores, times)
sim_theo_spectra = function(all_params, n_cpus, times) {
all_params$cpu = sample(1:n_cpus, nrow(all_params), replace = TRUE)
all_params = split(all_params, all_params$cpu)
mclapply(all_params, function(df_per_cpu) {
df_per_cpu$sequence = as.character(df_per_cpu$sequence)
df_per_cpu$charge = as.numeric(as.character(df_per_cpu$charge))
lapply(1:nrow(df_per_cpu), function(ith_row) {
print(paste("Simulation", ith_row, "\n"))
res = tryCatch(simulate_theoretical_spectra(sequence = df_per_cpu[ith_row, "sequence"],
charge = df_per_cpu[ith_row, "charge"],
protection_factor = df_per_cpu[ith_row, "protection_factor"],
times = times,
pH = df_per_cpu[ith_row, "pH"],
temperature = 15,
n_molecules = 500,
time_step_const = df_per_cpu[ith_row, "step"]),
error = function(e) {
print(e)
data.frame()})
print("halo")
saveRDS(res, file = paste0("./results/theo_spectrum_", df_per_cpu[ith_row, "sequence"], "_",
df_per_cpu[ith_row, "pH"], "_",
df_per_cpu[ith_row, "protection_factor"], "_",
ith_row, ".RDS", collapse = ""))
rm(res)
})
}, mc.cores = n_cpus)
}
times = c(5, 10, 20, 30, 40)
all_params = readRDS("./all_params.RDS")[1, ]
all_params$sequence = as.character(all_params$sequence)
all_params$charge = as.numeric(as.character(all_params$charge))
cores = detectCores()
cores = 1
sim_theo_spectra(all_params, cores, times)
theo_spectrum_PPVQ_6_0.999999999999999_1 <- readRDS("G:/HDX_sim_vol2/results/theo_spectrum_PPVQ_6_0.999999999999999_1.RDS")
theo_spectrum_PPVQ_6_0.999999999999999_1
times = c(5, 10, 20, 30, 40)
all_params = readRDS("./all_params.RDS")[1:10, ]
all_params$sequence = as.character(all_params$sequence)
all_params$charge = as.numeric(as.character(all_params$charge))
cores = detectCores()
sim_theo_spectra(all_params, cores, times)
cores = 1
sim_theo_spectra(all_params, cores, times)
setwd("G:/HDX_sim_vol2")
data = read.csv("KD_200622_hemoglobina_full (1).csv")
data
all_params = readRDS("./all_params.RDS")
all_params %>%
filter(sequence == "VLSPADKTNVKAAWGKVGAHAGE")
library(dplyr)
filter(sequence == "VLSPADKTNVKAAWGKVGAHAGE")
all_params %>%
filter(sequence == "VLSPADKTNVKAAWGKVGAHAGE")
sequences = data %>%
select(sequence) %>%
unique
sequences = data %>%
select(sequence) %>%
unique()
data
sequences = data %>%
select(Sequence) %>%
unique()
sequences
sequences %in% all_params$sequence
sequences
sequences[1] %in% all_params$sequence
all_params$sequence
sequences[1]
sequences = data %>%
select(Sequence) %>%
unique()
sequences
sequences$Sequence %in% all_params$sequence
unique(sequences$Sequence) == unique(all_params$sequence)
length(unique(sequences$Sequence)) ==  length(unique(all_params$sequence))
length(unique(all_params$sequence))
length(unique(sequences$Sequence))
length(unique(all_params$sequence))
length(unique(data$Sequence))
unique(data$Sequence) %in% unique(all_params$sequence)
setdiff(unique(all_params$sequence), unique(data$Sequence))
setdiff(unique(data$Sequence), unique(all_params$sequence))
setdiff(unique(all_params$sequence), unique(data$Sequence))
all_params
hdx_processed <- readRDS("G:/kodyHDX/hdx_processed.RDS")
hdx_processed
hdx_processed$Sequence
unique(hdx_processed$Sequence)
length(unique(hdx_processed$Sequence))
setdiff(unique(all_params$sequence), unique(data$Sequence))
sum(!(unique(all_params$sequence) %in% length(unique(hdx_processed$Sequence))))
unique(all_params$sequence) %in% length(unique(hdx_processed$Sequence)
hdx_processed)
sum(!(unique(all_params$sequence) %in% unique(hdx_processed$Sequence)))
unique(hdx_processed$Sequence)
unique(all_params$sequence) %in% unique(hdx_processed$Sequence)
all_params = readRDS("./all_params.RDS")
all_params
library(dplyr)
all_params %>%
select(protection_factor)
all_params %>%
select(protection_factor) %>%
unique()
all_params %>%
select(-protection_factor)
all_params %>%
select(-protection_factor) %>%
unique()
all_params %>%
select(-protection_factor, -fraction) %>%
unique()
all_params %>%
select(-protection_factor, -fraction) %>%
nrow()
all_params %>%
nrow()
all_params %>%
select(-protection_factor, -fraction) %>%
unique() %>%
nrow()
all_params %>%
select(-protection_factor, -fraction) %>%
unique() %>%
nrow()
all_params %>%
select(-protection_factor, -fraction) %>%
unique()
10^c(1, 2, 5)
all_params1 = all_params %>%
select(-protection_factor, -fraction) %>%
unique()
all_params1
all_params1 %>%
mutate(protection_factor = 10)
all_params = readRDS("./all_params.RDS")
all_params = all_params %>%
select(-protection_factor, -fraction) %>%
unique()
all_params1 = all_params %>%
mutate(protection_factor = 10)
all_params1 = all_params %>%
mutate(protection_factor = 10)
all_params2 = all_params %>%
mutate(protection_factor = 100)
all_params3 = all_params %>%
mutate(protection_factor = 100000)
rbind(all_params1, all_params2, all_params3)
all_params = readRDS("./all_params.RDS")
all_params
nrow(all_params)
all_params = all_params %>%
select(-protection_factor, -fraction) %>%
unique()
nrow(all_params)
all_params = readRDS("./all_params.RDS")
all_params
library(dplyr)
all_params = readRDS("./all_params.RDS")
nrow(all_params)
all_params = all_params %>%
select(-protection_factor, -fraction) %>%
unique()
all_params1 = all_params %>%
mutate(protection_factor = 10)
all_params2 = all_params %>%
mutate(protection_factor = 100)
all_params3 = all_params %>%
mutate(protection_factor = 100000)
rbind(all_params1, all_params2, all_params3)
all_params_new_pf = rbind(all_params1, all_params2, all_params3)
all_params_new_pf
saveRDS(all_params_new_pf, file = "all_params_new_pf.RDS")
nrow(all_params_new_pf)
all_params = readRDS("./all_params.RDS")
all_params
