runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/very-hard-text-input/ex.R')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/very-hard-text-input/ex.R')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/very-hard-text-input/ex.R')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/very-hard-text-input/ex.R')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/very-hard-text-input/ex.R')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/very-hard-text-input')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/very-hard-text-input')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/very-hard-text-input')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/very-hard-text-input')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/very-hard-text-input')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/programative-component-generation')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/programative-component-generation')
head(iris)
df = data.frame(x = rnorm(100), y = rnorm(100))
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/programative-component-generation')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/programative-component-generation')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/programative-component-generation')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/programative-component-generation')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/programative-component-generation')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/programative-component-generation')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/programative-component-generation')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/programative-component-generation')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/programative-component-generation')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/programative-component-generation')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/programative-component-generation')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/programative-component-generation')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/programative-component-generation')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/programative-component-generation/zad1.R')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/programative-component-generation/zad2.R')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/programative-component-generation/zad2.R')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/programative-component-generation/zad2.R')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/programative-component-generation/zad2.R')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/programative-component-generation/zad2.R')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/programative-component-generation/zad2.R')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/programative-component-generation/zad2.R')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/programative-component-generation/zad2.R')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/programative-component-generation/zad2.R')
ls("package:shiny")
grepl(vec, "c", fixed = TRUE)
vec = ls("package:shiny")
grepl(vec, "c", fixed = TRUE)
lapply(vec, function(i) {
grepl(i, "c", fixed = TRUE)
})
grepl( "c",i, fixed = TRUE)
lapply(vec, function(i) {
grepl( "c",i, fixed = TRUE)
})
lapply(vec, function(i) {
grepl("Output",i, fixed = TRUE)
})
sapply(vec, function(i) {
grepl("Output",i, fixed = TRUE)
})
v = sapply(vec, function(i) {
grepl("Output",i, fixed = TRUE)
})
vec[v]
fun_Output = sapply(ls("package:shiny"), function(i) {
grepl("Output", i, fixed = TRUE)
})
fun_Output
fun_Output = ls("package:shiny")[sapply(ls("package:shiny"), function(i) {
grepl("Output", i, fixed = TRUE)
})]
fun_Output
fun_Output = ls("package:shiny")[sapply(ls("package:shiny"), function(i) {
grepl("Output", i, fixed = TRUE)
})]
for(i in fun_Output) {
eval(parse(text = paste(fun_Output[i],
"_h <- function(outputId, ...) helper(",
fun_Output[i],
"(outputId, ...), content = outputId)")))
}
fun_Output
a = fun_Output[1]
fun_Output = ls("package:shiny")[sapply(ls("package:shiny"), function(i) {
grepl("Output", i, fixed = TRUE)
})]
for(fun in fun_Output) {
eval(parse(text = paste(fun, "_h <- function(outputId, ...) helper(",
fun, "(outputId, ...), content = outputId)")))
}
a
paste(fun, "_h <- function(outputId, ...) helper(",
fun, "(outputId, ...), content = outputId)")
eval(parse(text = paste(fun, "_h <- function(outputId, ...) {helper(",
fun, "(outputId, ...), content = outputId)}")))
paste(fun, "_h <- function(outputId, ...) {helper(",
fun, "(outputId, ...), content = outputId)}")
paste0(fun, "_h <- function(outputId, ...) {helper(",
fun, "(outputId, ...), content = outputId)}")
fun_Output = ls("package:shiny")[sapply(ls("package:shiny"), function(i) {
grepl("Output", i, fixed = TRUE)
})]
for(fun in fun_Output) {
eval(parse(text = paste0(fun, "_h <- function(outputId, ...) {helper(",
fun, "(outputId, ...), content = outputId)}")))
}
library(shiny); runApp('C:/Users/Kanti/Desktop/praktyki/HaDeX_components/apap.R')
ChickWeight
HairEyeColor
occupationalStatus
stackloss
sunspots
Titanic
treering
Seatbelts
runApp('C:/Users/Kanti/Desktop/praktyki/HaDeX_components/apap.R')
runApp('apap.R')
runApp('C:/Users/Kanti/Desktop/praktyki/HaDeX_components/apap.R')
runApp('apap.R')
runApp('C:/Users/Kanti/Desktop/praktyki/HaDeX_components/apap.R')
runApp('apap.R')
runApp('C:/Users/Kanti/Desktop/praktyki/HaDeX_components/apap.R')
runApp('C:/Users/Kanti/Desktop/praktyki/HaDeX_components/apap.R')
runApp('C:/Users/Kanti/Desktop/praktyki/HaDeX_components/apap.R')
stackloss
runApp('C:/Users/Kanti/Desktop/praktyki/HaDeX_components/apap.R')
runApp('C:/Users/Kanti/Desktop/praktyki/HaDeX_components/apap.R')
state.namestate.name
state.name
UKgas
runApp('C:/Users/Kanti/Desktop/praktyki/HaDeX_components/apap.R')
uspop
warpbreaks
runApp('C:/Users/Kanti/Desktop/praktyki/HaDeX_components/apap.R')
women
runApp('C:/Users/Kanti/Desktop/praktyki/HaDeX_components/apap.R')
runApp('C:/Users/Kanti/Desktop/praktyki/HaDeX_components/apap.R')
runApp('C:/Users/Kanti/Desktop/praktyki/HaDeX_components/apap.R')
runApp('C:/Users/Kanti/Desktop/praktyki/HaDeX_components/apap.R')
model
data
`data1 = ` <- readRDS("G:/kodyHDX/hdx_processed.RDS")
data = data1
data <- readRDS("G:/kodyHDX/hdx_processed.RDS")
data = data %>%
filter(!is.na(Mass)) %>%
filter(Exposure == 0.167)
library(dplyr)
aic = rep(NA, 2)
loglik = rep(NA, 2)
Test_statistic = rep(NA, 2)
p_value = rep(NA, 2)
structure = c("compound symmetry", "AR(1)")
data = data %>%
filter(!is.na(Mass)) %>%
filter(Exposure == 0.167)
data
data = data %>%
filter(!is.na(Mass)) %>%
filter(Exposure == 0.167) %>%
filter(Sequence == "ALQVVR")
data
# compound symmetry structure
model = nlme::gls(Mass ~ State,
data = data,
correlation = corCompSymm())
library(nlme, lib.loc = "C:/Program Files/R/R-4.0.2/library")
# compound symmetry structure
model = nlme::gls(Mass ~ State,
data = data,
correlation = corCompSymm())
result = anova(model)
result
result = anova(model)
aic[1] = AIC(model)
Test_statistic[1] = result$`F-value`[2]
p_value[1] = result$`p-value`[2]
# compound symmetry structure
model = nlme::gls(Mass ~ State,
data = data,
correlation = corAR1())
result = anova(model)
aic[2] = AIC(model)
Test_statistic[2] = result$`F-value`[2]
p_value[2] = result$`p-value`[2]
data.frame(Test = "ANOVA",
Test_statistic = Test_statistic,
P_value = p_value,
Significant_difference = (p_value <= significance_level),
Time = Time,
Transformation = Transformation,
AIC = aic,
logLik = loglik)
significance_level = 0.05
logLik(model)
loglik[1] = logLik(model)
loglik
aic = rep(NA, 2)
loglik = rep(NA, 2)
Test_statistic = rep(NA, 2)
p_value = rep(NA, 2)
structure = c("compound symmetry", "AR(1)")
# compound symmetry structure
model = nlme::gls(Mass ~ State,
data = data,
correlation = corCompSymm())
result = anova(model)
aic[1] = AIC(model)
Test_statistic[1] = result$`F-value`[2]
p_value[1] = result$`p-value`[2]
loglik[1] = logLik(model)
# compound symmetry structure
model = nlme::gls(Mass ~ State,
data = data,
correlation = corAR1())
result = anova(model)
aic[2] = AIC(model)
Test_statistic[2] = result$`F-value`[2]
p_value[2] = result$`p-value`[2]
loglik[2] = logLik(model)
data.frame(Test = "ANOVA",
Test_statistic = Test_statistic,
P_value = p_value,
Significant_difference = (p_value <= significance_level),
Time = Time,
Transformation = Transformation,
AIC = aic,
logLik = loglik)
Time = 0.167
data.frame(Test = "ANOVA",
Test_statistic = Test_statistic,
P_value = p_value,
Significant_difference = (p_value <= significance_level),
Time = Time,
Transformation = Transformation,
AIC = aic,
logLik = loglik)
data.frame(Test = "ANOVA",
Test_statistic = Test_statistic,
P_value = p_value,
Significant_difference = (p_value <= significance_level),
AIC = aic,
logLik = loglik)
data.frame(Test = "ANOVA",
Structure = structure,
Test_statistic = Test_statistic,
P_value = p_value,
Significant_difference = (p_value <= significance_level),
AIC = aic,
logLik = loglik)
hdx_anova = function(data, significance_level = 0.05) {
aic = rep(NA, 2)
loglik = rep(NA, 2)
Test_statistic = rep(NA, 2)
p_value = rep(NA, 2)
structure = c("compound symmetry", "AR(1)")
# compound symmetry structure
model = nlme::gls(Mass ~ State,
data = data,
correlation = corCompSymm())
result = anova(model)
aic[1] = AIC(model)
Test_statistic[1] = result$`F-value`[2]
p_value[1] = result$`p-value`[2]
loglik[1] = logLik(model)
# compound symmetry structure
model = nlme::gls(Mass ~ State,
data = data,
correlation = corAR1())
result = anova(model)
aic[2] = AIC(model)
Test_statistic[2] = result$`F-value`[2]
p_value[2] = result$`p-value`[2]
loglik[2] = logLik(model)
data.frame(Test = "ANOVA",
Structure = structure,
Test_statistic = Test_statistic,
P_value = p_value,
Significant_difference = (p_value <= significance_level),
AIC = aic,
logLik = loglik)
}
library(shiny); runApp('C:/Users/Kanti/Desktop/praktyki/HaDeX_components/modules/app_modules1.R')
runApp('C:/Users/Kanti/Desktop/praktyki/HaDeX_components/modules/app_modules1.R')
runApp('C:/Users/Kanti/Desktop/praktyki/HaDeX_components/modules/app_modules1.R')
runApp('C:/Users/Kanti/Desktop/praktyki/HaDeX_components/modules/app_modules1.R')
iris[[1]]
runApp('C:/Users/Kanti/Desktop/praktyki/HaDeX_components/modules/app_modules1.R')
Orange
runApp('C:/Users/Kanti/Desktop/praktyki/HaDeX_components/modules/app_modules1.R')
runApp('C:/Users/Kanti/Desktop/praktyki/HaDeX_components/modules/app_modules.R')
params_from_file
library(powerHDX)
library(dplyr)
library(ggplot2)
library(plyr)
files <- list.files(path = "G:/HDX_sim_vol2/theo_spectra_sim/results", pattern = "\\.RDS$", full.names = TRUE)
sim_results <- do.call("rbind", lapply(files, readRDS))
params_from_file <- readRDS("all_params_new_pf.RDS")
setwd("G:/HDX_sim_vol2/theo_spectra_sim")
files <- list.files(path = "G:/HDX_sim_vol2/theo_spectra_sim/results", pattern = "\\.RDS$", full.names = TRUE)
sim_results <- do.call("rbind", lapply(files, readRDS))
params_from_file <- readRDS("all_params_new_pf.RDS")
params_from_file
sim_results
nrow(params_from_file) #all spectra #12 117 rows
length(files) #spectra from simulation #11 107 files
nrow(params_from_file) - length(files) #missing spectra
missing1 <- sum(sapply(files, function(i) {
dat = readRDS(i)
nrow(dat) == 0
}))
missing1 #empty data frame, i.e. error during simulation #18 data frames
sim_params <- sim_results %>%
select(Sequence, PH, Charge, PF) %>%
unique() # 7986 rows ?? why?
missing_params <- setdiff(params_from_file, sim_params)
sim_params
params <- params_from_file %>%
select(sequence, pH, charge, protection_factor) %>%
unique() #12117 rows
params[["charge"]] <- as.numeric(params[["charge"]])
sim_params <- sim_results %>%
select(Sequence, PH, Charge, PF) %>%
unique() # 7986 rows ?? why?
colnames(sim_params) <- c("sequence", "pH", "charge", "protection_factor")
params
merge(x = sim_params, y = params, by = c("Sequence", "PH", "Charge", "PF"), all.y = TRUE)
merge(x = sim_params, y = params, by = c("sequence", "pH", "charge", "protection_factor"), all.y = TRUE)
merge(x = sim_params, y = params, by = c("sequence", "pH", "charge", "protection_factor"), all.x = TRUE)
merge(x = sim_params, y = params, by = c("sequence", "pH", "charge", "protection_factor"))
params
files <- list.files(path = "G:/HDX_sim_vol2/theo_spectra_sim/results", pattern = "\\.RDS$", full.names = TRUE)
sim_results <- do.call("rbind", lapply(files, readRDS))
params_from_file <- readRDS("all_params_new_pf.RDS")
nrow(params_from_file) #all spectra #12 117 rows
length(files) #spectra from simulation #11 107 files
nrow(params_from_file) - length(files) #missing spectra
missing1 <- sum(sapply(files, function(i) {
dat = readRDS(i)
nrow(dat) == 0
}))
missing1 #empty data frame, i.e. error during simulation #18 data frames
params_from_file[["charge"]] <- as.numeric(params_from_file[["charge"]])
sim_params <- sim_results %>%
select(Sequence, PH, Charge, PF) %>%
unique() # 7986 rows ?? why?
params_from_file
colnames(sim_params) <- c("sequence", "pH", "charge", "protection_factor")
merge(x = sim_params, y = params, by = c("sequence", "pH", "charge", "protection_factor"), all.y = TRUE)
merge(x = sim_params, y = params, by = c("sequence", "pH", "charge", "protection_factor"), all.x = TRUE)
merge(x = sim_params, y = params_from_file,
by = c("sequence", "pH", "charge", "protection_factor"),
all.y = TRUE)
merge(x = sim_params, y = params_from_file,
by = c("sequence", "pH", "charge", "protection_factor"),
all.x = TRUE)
sim_results %>%
select(Sequence, PH, Charge, PF)
sim_results
sim_results %>%
select(Sequence, PH, Charge, PF, Exposure)
sim_params <- sim_results %>%
select(Sequence, PH, Charge, PF, Exposure)
colnames(sim_params) <- c("sequence", "pH", "charge", "protection_factor")
colnames(sim_params) <- c("sequence", "pH", "charge", "protection_factor", "time")
merge(x = sim_params, y = params_from_file,
by = c("sequence", "pH", "charge", "protection_factor"),
all.x = TRUE)
merge(x = sim_params, y = params_from_file,
by = c("sequence", "pH", "charge", "protection_factor"),
all.x = TRUE) %>%
unique()
merge(x = sim_params, y = params_from_file,
by = c("sequence", "pH", "charge", "protection_factor"),
all.x = TRUE) %>%
select(-time.x, time.y) %>%
unique()
sim_params_step <- merge(x = sim_params, y = params_from_file,
by = c("sequence", "pH", "charge", "protection_factor"),
all.x = TRUE) %>%
select(-time.x, time.y) %>%
unique()
sim_params_step
missing_params <- setdiff(params, sim_params_step)
sim_params_step
sim_params_step
sim_params_step <- merge(x = sim_params, y = params_from_file,
by = c("sequence", "pH", "charge", "protection_factor"),
all.x = TRUE) %>%
select(-time.x, -time.y) %>%
unique()
sim_params_step
missing_params <- setdiff(params, sim_params_step) #4131 rows
simulate_theoretical_spectra
params_from_file[["charge"]] <- as.numeric(params_from_file[["charge"]]) %>%
select(-step, -n_steps)
params_from_file[["charge"]] <- as.numeric(params_from_file[["charge"]])
params_from_file %>%
select(-step, -n_steps)
params_from_file[["charge"]] <- as.numeric(params_from_file[["charge"]])
params_from_file <- params_from_file %>%
select(-step, -n_steps)
sim_params <- sim_results %>%
select(Sequence, PH, Charge, PF, Exposure)
colnames(sim_params) <- c("sequence", "pH", "charge", "protection_factor", "time")
sim_params_step <- merge(x = sim_params, y = params_from_file,
by = c("sequence", "pH", "charge", "protection_factor"),
all.x = TRUE) %>%
select(-time.x, -time.y) %>%
unique()
sim_params_step
missing_params <- setdiff(params, sim_params_step) #4131 rows
params
missing_params <- setdiff(params_from_file, sim_params_step) #4131 rows
params_from_file
params_from_file <- params_from_file %>%
select(-step, -n_steps, -time)
sim_params <- sim_results %>%
select(Sequence, PH, Charge, PF, Exposure)
colnames(sim_params) <- c("sequence", "pH", "charge", "protection_factor", "time")
sim_params_step <- merge(x = sim_params, y = params_from_file,
by = c("sequence", "pH", "charge", "protection_factor"),
all.x = TRUE) %>%
select(-time.x, -time.y) %>%
unique()
missing_params <- setdiff(params_from_file, sim_params_step)
params_from_file <- readRDS("all_params_new_pf.RDS")
nrow(params_from_file) #all spectra #12 117 rows
length(files) #spectra from simulation #11 107 files
nrow(params_from_file) - length(files) #missing spectra
missing1 <- sum(sapply(files, function(i) {
dat = readRDS(i)
nrow(dat) == 0
}))
missing1 #empty data frame, i.e. error during simulation #18 data frames
params_from_file[["charge"]] <- as.numeric(params_from_file[["charge"]])
params <- params_from_file %>%
select(-step, -n_steps, -time)
sim_params <- sim_results %>%
select(Sequence, PH, Charge, PF, Exposure)
colnames(sim_params) <- c("sequence", "pH", "charge", "protection_factor", "time")
sim_params_step <- merge(x = sim_params, y = params,
by = c("sequence", "pH", "charge", "protection_factor"),
all.x = TRUE) %>%
select(-time.x, -time.y) %>%
unique()
missing_params <- setdiff(params, sim_params_step)
sim_params_step <- merge(x = sim_params, y = params,
by = c("sequence", "pH", "charge", "protection_factor"),
all.x = TRUE) %>%
unique()
sim_params_step
missing_params
missing_params <- setdiff(params, sim_params_step) #4131 rows
colnames(missing_params) <- c("sequence", "pH", "charge", "protection_factor")
saveRDS(missing_params, file = "missing_params.RDS")
missing_params <- readRDS("G:/HDX_sim_vol2/theo_spectra_sim/missing_params.RDS")
missing_params
missing_params <- readRDS("G:/HDX_sim_vol2/theo_spectra_sim/missing_params.RDS")
missing_params
params_from_file
missing_params <- setdiff(params, sim_params_step) #4131 rows
files <- list.files(path = "G:/HDX_sim_vol2/theo_spectra_sim/results", pattern = "\\.RDS$", full.names = TRUE)
sim_results <- do.call("rbind", lapply(files, readRDS))
params_from_file <- readRDS("all_params_new_pf.RDS")
nrow(params_from_file) #all spectra #12 117 rows
length(files) #spectra from simulation #11 107 files
nrow(params_from_file) - length(files) #missing spectra
missing1 <- sum(sapply(files, function(i) {
dat = readRDS(i)
nrow(dat) == 0
}))
missing1 #empty data frame, i.e. error during simulation #18 data frames
params_from_file[["charge"]] <- as.numeric(params_from_file[["charge"]])
params <- params_from_file %>%
select(-step, -n_steps, -time)
sim_params <- sim_results %>%
select(Sequence, PH, Charge, PF, Exposure)
colnames(sim_params) <- c("sequence", "pH", "charge", "protection_factor", "time")
sim_params_step <- merge(x = sim_params, y = params,
by = c("sequence", "pH", "charge", "protection_factor"),
all.x = TRUE) %>%
unique()
missing_params <- setdiff(params, sim_params_step) #4131 rows
colnames(missing_params) <- c("sequence", "pH", "charge", "protection_factor", "size_of_time_step")
params
sim_params_step
sim_params <- sim_results %>%
select(Sequence, PH, Charge, PF)
colnames(sim_params) <- c("sequence", "pH", "charge", "protection_factor")
sim_params_step <- merge(x = sim_params, y = params,
by = c("sequence", "pH", "charge", "protection_factor"),
all.x = TRUE) %>%
unique()
sim_params_step
missing_params <- setdiff(params, sim_params_step) #4131 rows
colnames(missing_params) <- c("sequence", "pH", "charge", "protection_factor", "size_of_time_step")
missing_params
saveRDS(missing_params, file = "missing_params.RDS")
simulate_theoretical_spectra
params_from_file
params_from_file[["charge"]] <- as.numeric(params_from_file[["charge"]])
params <- params_from_file %>%
select(-size_of_time_step, -n_steps, -time)
sim_params <- sim_results %>%
select(Sequence, PH, Charge, PF)
colnames(sim_params) <- c("sequence", "pH", "charge", "protection_factor")
sim_params_step <- merge(x = sim_params, y = params,
by = c("sequence", "pH", "charge", "protection_factor"),
all.x = TRUE) %>%
unique()
missing_params <- setdiff(params, sim_params_step) #4131 rows
colnames(missing_params) <- c("sequence", "pH", "charge", "protection_factor", "step")
missing_params
saveRDS(missing_params, file = "missing_params.RDS")
theo_deut_curves <- readRDS("G:/HDX_simulations/theo_spectra_sim/theo_deut_curves.RDS")
theo_deut_curves
