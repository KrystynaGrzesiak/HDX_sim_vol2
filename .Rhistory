library(shiny)
library(shinyhelper)
library(shinyKrysia)
source("./modules.R")
ui <- shinyUI(fluidPage(mainPanel(
tabsetPanel(tabPanel(title = "geom_point",
column(width = 3),
column(width = 9,
tabsetPanel_UI("point"))),
tabPanel(title = "geom_col",
column(width = 3),
column(width = 9,
tabsetPanel_UI("col"))),
tabPanel("plots 3"),
tabPanel("plots 4"),
tabPanel("plots 5")
)
)))
server <-shinyServer(function(input, output) {
observe_helpers(session = getDefaultReactiveDomain(), help_dir = "helpfiles")
#point plot and data
point_data <- reactive({
iris
})
point_plot <- reactive({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, col = Species)) +
geom_point()
})
tabsetPanel_SERVER(id = "point",
plot_out = point_plot,
table_out = point_data,
plot_type = "geom_point",
tt_content = list(row_text = c("Sepal length x width: %f x %f",
"Petal length x width: %f x %f",
"Species: %s"),
chosen_cols = c("Sepal.Length", "Sepal.Width",
"Petal.Length", "Petal.Width",
"Species")))
#geom_col plot and data
col_data <- reactive({
count = as.vector(table(iris[["Species"]]))
species = names(table(iris[["Species"]]))
data.frame(count, species)
})
col_plot <- reactive({
ggplot(col_data(), aes(x = species, y = count)) +
geom_col()
})
tabsetPanel_SERVER(id = "col",
plot_out = col_plot,
table_out = col_data,
plot_type = "geom_col")
})
shinyApp(ui, server)
devtools::install_github("hadexversum/shinyKrysia")
library(HaDeX)
library(dplyr)
dat_raw <- read_hdx(system.file(package = "HaDeX", "HaDeX/data/KD_180110_CD160_HVEM.csv"))
data = dat_raw %>%
mutate(pepMass = z*(Center - 1.0072764668799))
data
data = dat_raw %>%
mutate(pepMass = z*(Center - 1.0072764668799)) %>%
group_by(Protein, Sequence, Exposure)
data
data = dat_raw %>%
mutate(pepMass = z*(Center - 1.0072764668799)) %>%
group_by(Protein, Sequence, Exposure) %>%
length()
data
dat_raw %>%
mutate(pepMass = z*(Center - 1.0072764668799)) %>%
group_by(Protein, Sequence, Exposure)
dat_raw %>%
mutate(pepMass = z*(Center - 1.0072764668799)) %>%
group_by(Protein, Sequence, Exposure) %>%
mutate(agg = sum(Exposure))
dat_raw %>%
mutate(pepMass = z*(Center - 1.0072764668799)) %>%
group_by(Protein, Sequence, Exposure) %>%
mutate(agg = length(Exposure))
View(dat_raw)
View(dat_raw)
dat_raw %>%
mutate(pepMass = z*(Center - 1.0072764668799)) %>%
group_by(Protein, Sequence, State, Exposure) %>%
mutate(agg = length(Exposure))
1:3 * 3:5
dat_raw %>%
mutate(pepMass = z*(Center - 1.0072764668799)) %>%
group_by(Protein, Sequence, State, Exposure) %>%
mutate(agg = mean(Inten*pepMass))
dat_raw %>%
mutate(pepMass = z*(Center - 1.0072764668799)) %>%
group_by(Protein, Sequence, State, Exposure) %>%
mutate(agg = mean(Inten*pepMass))
dat_raw %>%
mutate(pepMass = z*(Center - 1.0072764668799)) %>%
group_by(Protein, Sequence, State, Exposure) %>%
mutate(aggMass = mean(Inten*pepMass))
dat_raw = dat_raw %>%
mutate(pepMass = z*(Center - 1.0072764668799)) %>%
group_by(Protein, Sequence, State, Exposure) %>%
mutate(aggMass = mean(Inten*pepMass)) %>%
ungroup()
dat_raw
all_params = readRDS("./all_params.RDS")[1:10, ]
setwd("~/HDX_sim_vol2")
setwd("G:/HDX_sim_vol2")
all_params = readRDS("./all_params_new_pf.RDS")
all_params
time_constant = readRDS("../time_constant.RDS")
setwd("G:/HDX_sim_vol2")
time_constant = readRDS("../time_constant.RDS")
time_constant = readRDS("time_constant.RDS")
time_constant
by_ph_seq = readRDS("by_ph_seq.RDS")
by_ph_seq
typeof(by_ph_seq)
setwd("G:/HDX_sim_vol2")
files <- list.files(path = "\\results", pattern = "\\.RDS$", full.names = TRUE)
files
files <- list.files(path = "/results", pattern = "\\.RDS$", full.names = TRUE)
files
setwd("G:/HDX_sim_vol2")
files <- list.files(path = "G:/HDX_sim_vol2", pattern = "\\.RDS$", full.names = TRUE)
files
files <- list.files(path = "G:/HDX_sim_vol2/results", pattern = "\\.RDS$", full.names = TRUE)
files
sim_results <- do.call("rbind", lapply(files, readRDS))
sim_results
library(dplyr)
sim_results %>%
group_by(Sequence, PH) %>%
group_split()
a = sim_results %>%
group_by(Sequence, PH) %>%
split()
a = splot(sim_results, f = c(sim_results[["Sequence"]], sim_results[["PH"]]))
a = split(sim_results, f = c(sim_results[["Sequence"]], sim_results[["PH"]]))
a = split(sim_results, f = sim_results[[c("Sequence", "PH")]])
sim_results[[c("Sequence", "PH")]]
sim_results[, c("Sequence", "PH")]
a = split(sim_results, f = sim_results[, c("Sequence", "PH")])
a
spectra_by_ph_sequence = split(sim_results, f = sim_results[, c("Sequence", "PH")])
saveRDS(spectra_by_ph_sequence, file = "spectra_by_ph_sequence.RDS")
saveRDS(spectra_by_ph_sequence, file = "spectra_by_ph_seq.RDS")
library(powerHDX)
get_deuteration_curves_from_spectra(spectra_by_ph_sequence)
library(powerHDX)
get_deuteration_curves_from_spectra(spectra_by_ph_sequence)
if (!require(devtools)) {
install.packages('devtools')
}
devtools::install_github("hadexversum/powerHDX")
detach("package:powerHDX", unload = TRUE)
if (!require(devtools)) {
install.packages('devtools')
}
devtools::install_github("hadexversum/powerHDX")
remove.packages("powerHDX", lib="~/R/win-library/4.0")
if (!require(devtools)) {
install.packages('devtools')
}
devtools::install_github("hadexversum/powerHDX")
if (!require(devtools)) {
install.packages('devtools')
}
devtools::install_github("hadexversum/powerHDX")
if (!require(devtools)) {
install.packages('devtools')
}
devtools::install_github("hadexversum/powerHDX")
Sys.setenv(R_INSTALL_STAGED = FALSE)
library(powerHDX)
library(powerHDX)
get_deuteration_curves_from_spectra(spectra_by_ph_sequence)
