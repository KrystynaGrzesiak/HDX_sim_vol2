mutate(Test_id = factor(Test_id, levels = tests)) %>%
do_plot(pfs = c(20, 30, 40)) +
# scale_fill_manual(name = "Test",
#                   values = col_plt3,
#                   labels = c("HDX-Analyzer", "Houde","MEMHDX",
#                              "LASSO id", "RIDGE exposure id", "RIDGE id"))
scale_fill_brewer(name = "Test",
palette="Spectral",
labels = c("Houde","Semiparametric model"))
plot_rej_rate
plot_rej_rate <- sim_res_houde %>%
filter(Sequence %in% intersect(Sequence, sim_res$Sequence)) %>%
rbind(sim_res) %>%
group_by(Test_id, State_1, State_2) %>%
summarise(Power = round(mean(Significant_difference, na.rm = TRUE), 2)) %>%
ungroup() %>%
mutate(Test_id = factor(Test_id, levels = tests)) %>%
do_plot(pfs = c(20, 30, 40)) +
# scale_fill_manual(name = "Test",
#                   values = col_plt3,
#                   labels = c("HDX-Analyzer", "Houde","MEMHDX",
#                              "LASSO id", "RIDGE exposure id", "RIDGE id"))
scale_fill_brewer(name = "Test",
labels = c("Houde","Semiparametric model"))
plot_rej_rate
plot_rej_rate <- sim_res_houde %>%
filter(Sequence %in% intersect(Sequence, sim_res$Sequence)) %>%
rbind(sim_res) %>%
group_by(Test_id, State_1, State_2) %>%
summarise(Power = round(mean(Significant_difference, na.rm = TRUE), 2)) %>%
ungroup() %>%
mutate(Test_id = factor(Test_id, levels = tests)) %>%
do_plot(pfs = c(10, 15, 20, 30, 40))+
scale_fill_brewer(name = "Test",
palette="Spectral",
labels = c("Houde","Semiparametric model"))
plot_rej_rate
plot_rej_rate <- sim_res_houde %>%
filter(Sequence %in% intersect(Sequence, sim_res$Sequence)) %>%
rbind(sim_res) %>%
group_by(Test_id, State_1, State_2) %>%
summarise(Power = round(mean(Significant_difference, na.rm = TRUE), 2)) %>%
ungroup() %>%
mutate(Test_id = factor(Test_id, levels = tests)) %>%
do_plot(pfs = c(10, 15, 20, 30, 40))+
scale_fill_manual(name = "Test",
palette=c("red", "blue"),
labels = c("Houde","Semiparametric model"))
plot_rej_rate
sim_res_houde
sim_res
sim_res <- read_summarize_files("./final_model_without_id/results")
sim_res_houde <- read_summarize_files("./houde_area/results")
plot_rej_rate <- sim_res_houde %>%
filter(Sequence %in% intersect(Sequence, sim_res$Sequence)) %>%
rbind(sim_res) %>%
group_by(Test_id, State_1, State_2) %>%
summarise(Power = round(mean(Significant_difference, na.rm = TRUE), 2)) %>%
ungroup() %>%
mutate(Test_id = factor(Test_id, levels = tests)) %>%
do_plot(pfs = c(20, 30, 40)) +
# scale_fill_manual(name = "Test",
#                   values = col_plt3,
#                   labels = c("HDX-Analyzer", "Houde","MEMHDX",
#                              "LASSO id", "RIDGE exposure id", "RIDGE id"))
scale_fill_brewer(name = "Test",
labels = c("Houde","Semiparametric model"))
plot_rej_rate
tests <- c("Houde_NA",
"Semiparametric model_identity"
)
sim_res
library(ggplot2)
library(dplyr)
library(stringr)
do_plot <- function(sim_results, pfs = unique(c(sim_results$State_1, sim_results$State_2))) {
# New facet label names for dose variable
pf1.labs <- paste("PF1 =", pfs)
names(pf1.labs) <- as.character(pfs)
# New facet label names for supp variable
pf2.labs <- paste("PF2 =", pfs)
names(pf2.labs) <- as.character(pfs)
p <- sim_results %>%
filter(State_1 %in% pfs, State_2 %in% pfs) %>%
ggplot(aes(x = Test_id, y = Power, fill = Test_id)) +
geom_col()+
ylab("Rejection rate") +
theme_minimal() +
ylim(0, 1.15) +
# geom_text(aes(label=Power), position=position_dodge(width=0.9), vjust=-0.25, size = 3) +
facet_grid(State_1~State_2, labeller = labeller(State_2 = pf1.labs, State_1 = pf2.labs)) +
ggtitle("Rejection rate in pairwise testing") +
theme(axis.text.x=element_blank(),
axis.title.x=element_blank(),
legend.position="bottom") +
theme(plot.title = element_text(hjust = 0.5))+
geom_label(aes(label = formatC(Power, digits = 2, width = 1)), show.legend = FALSE)
data_col <- sim_results %>%
filter(State_1 == State_2) %>%
filter(State_1 %in% pfs, State_2 %in% pfs)
p +
geom_rect(data = data_col, col = "black", fill = "white", xmin = -Inf, xmax = Inf,
ymin = -Inf, ymax = Inf, alpha = 0)
}
read_summarize_files <- function(path) {
files <- list.files(path = path, pattern = "\\.RDS$", full.names = TRUE)
do.call("rbind", lapply(files, readRDS)) %>%
filter(Transformation == "identity" | is.na(Transformation)) %>%
mutate(Test_id = paste0(Test, "_", Transformation)) %>%
filter(Time != "categorical" | is.na(Time)) %>%
select(-Time)
}
sim_res <- read_summarize_files("./final_model_without_id/results")
sim_res_houde <- read_summarize_files("./houde_area/results")
sim_res_houde
sim_res_houde %>%
filter(Sequence %in% intersect(Sequence, sim_res$Sequence))
sim_res_houde %>%
filter(Sequence %in% intersect(Sequence, sim_res$Sequence)) %>%
rbind(sim_res)
plot_rej_rate <- sim_res_houde %>%
filter(Sequence %in% intersect(Sequence, sim_res$Sequence)) %>%
rbind(sim_res) %>%
group_by(Test_id, State_1, State_2) %>%
summarise(Power = round(mean(Significant_difference, na.rm = TRUE), 2)) %>%
ungroup() %>%
do_plot(pfs = c(20, 30, 40)) +
# scale_fill_manual(name = "Test",
#                   values = col_plt3,
#                   labels = c("HDX-Analyzer", "Houde","MEMHDX",
#                              "LASSO id", "RIDGE exposure id", "RIDGE id"))
scale_fill_brewer(name = "Test",
labels = c("Houde","Semiparametric model"))
plot_rej_rate
plot_rej_rate <- sim_res_houde %>%
filter(Sequence %in% intersect(Sequence, sim_res$Sequence)) %>%
rbind(sim_res) %>%
group_by(Test_id, State_1, State_2) %>%
summarise(Power = round(mean(Significant_difference, na.rm = TRUE), 2)) %>%
ungroup() %>%
do_plot() +
# scale_fill_manual(name = "Test",
#                   values = col_plt3,
#                   labels = c("HDX-Analyzer", "Houde","MEMHDX",
#                              "LASSO id", "RIDGE exposure id", "RIDGE id"))
scale_fill_brewer(name = "Test",
labels = c("Houde","Semiparametric model"))
plot_rej_rate
plot_rej_rate <- sim_res_houde %>%
filter(Sequence %in% intersect(Sequence, sim_res$Sequence)) %>%
rbind(sim_res) %>%
group_by(Test_id, State_1, State_2) %>%
summarise(Power = round(mean(Significant_difference, na.rm = TRUE), 2)) %>%
ungroup() %>%
do_plot(pfs = unique(sim_results$State_1)) +
# scale_fill_manual(name = "Test",
#                   values = col_plt3,
#                   labels = c("HDX-Analyzer", "Houde","MEMHDX",
#                              "LASSO id", "RIDGE exposure id", "RIDGE id"))
scale_fill_brewer(name = "Test",
labels = c("Houde","Semiparametric model"))
plot_rej_rate <- sim_res_houde %>%
filter(Sequence %in% intersect(Sequence, sim_res$Sequence)) %>%
rbind(sim_res) %>%
group_by(Test_id, State_1, State_2) %>%
summarise(Power = round(mean(Significant_difference, na.rm = TRUE), 2)) %>%
ungroup() %>%
do_plot(pfs = unique(sim_res$State_1)) +
# scale_fill_manual(name = "Test",
#                   values = col_plt3,
#                   labels = c("HDX-Analyzer", "Houde","MEMHDX",
#                              "LASSO id", "RIDGE exposure id", "RIDGE id"))
scale_fill_brewer(name = "Test",
labels = c("Houde","Semiparametric model"))
plot_rej_rate
sim_res_houde %>%
filter(Sequence %in% intersect(Sequence, sim_res$Sequence)) %>%
rbind(sim_res)
sim_res_houde %>%
filter(Sequence %in% intersect(Sequence, sim_res$Sequence)) %>%
rbind(sim_res) %>%
group_by(Test, State_1, State_2)
sim_res_houde %>%
filter(Sequence %in% intersect(Sequence, sim_res$Sequence)) %>%
rbind(sim_res) %>%
group_by(Test, State_1, State_2) %>%
summarise(Power = round(mean(Significant_difference, na.rm = TRUE), 2))
sim_res_houde %>%
filter(Sequence %in% intersect(Sequence, sim_res$Sequence)) %>%
rbind(sim_res) %>%
group_by(Test, State_1, State_2) %>%
summarise(Power = round(mean(Significant_difference, na.rm = TRUE), 2)) %>%
ungroup() %>%
do_plot(pfs = unique(sim_res$State_1))
setwd("G:/gits/HDX_sim_vol2/power_sim/sim_new_models")
library(ggplot2)
library(dplyr)
library(stringr)
do_plot <- function(sim_results, pfs = unique(c(sim_results$State_1, sim_results$State_2))) {
# New facet label names for dose variable
pf1.labs <- paste("PF1 =", pfs)
names(pf1.labs) <- as.character(pfs)
# New facet label names for supp variable
pf2.labs <- paste("PF2 =", pfs)
names(pf2.labs) <- as.character(pfs)
p <- sim_results %>%
filter(State_1 %in% pfs, State_2 %in% pfs) %>%
ggplot(aes(x = Test_id, y = Power, fill = Test_id)) +
geom_col()+
ylab("Rejection rate") +
theme_minimal() +
ylim(0, 1.15) +
# geom_text(aes(label=Power), position=position_dodge(width=0.9), vjust=-0.25, size = 3) +
facet_grid(State_1~State_2, labeller = labeller(State_2 = pf1.labs, State_1 = pf2.labs)) +
ggtitle("Rejection rate in pairwise testing") +
theme(axis.text.x=element_blank(),
axis.title.x=element_blank(),
legend.position="bottom") +
theme(plot.title = element_text(hjust = 0.5))+
geom_label(aes(label = formatC(Power, digits = 2, width = 1)), show.legend = FALSE)
data_col <- sim_results %>%
filter(State_1 == State_2) %>%
filter(State_1 %in% pfs, State_2 %in% pfs)
p +
geom_rect(data = data_col, col = "black", fill = "white", xmin = -Inf, xmax = Inf,
ymin = -Inf, ymax = Inf, alpha = 0)
}
read_summarize_files <- function(path) {
files <- list.files(path = path, pattern = "\\.RDS$", full.names = TRUE)
do.call("rbind", lapply(files, readRDS)) %>%
filter(Transformation == "identity" | is.na(Transformation)) %>%
mutate(Test_id = paste0(Test, "_", Transformation)) %>%
filter(Time != "categorical" | is.na(Time)) %>%
select(-Time)
}
sim_res <- read_summarize_files("./results")
sim_res_houde <- read_summarize_files("../houde_area/results")
tests <- c("Houde_NA",
"Semiparametric model_identity"
)
plot_rej_rate <- sim_res_houde %>%
filter(Sequence %in% intersect(Sequence, sim_res$Sequence)) %>%
rbind(sim_res) %>%
group_by(Test_id, State_1, State_2) %>%
summarise(Power = round(mean(Significant_difference, na.rm = TRUE), 2)) %>%
ungroup() %>%
do_plot(pfs = unique(sim_res$State_1)) +
# scale_fill_manual(name = "Test",
#                   values = col_plt3,
#                   labels = c("HDX-Analyzer", "Houde","MEMHDX",
#                              "LASSO id", "RIDGE exposure id", "RIDGE id"))
scale_fill_brewer(name = "Test",
labels = c("Houde","Semiparametric model"))
plot_rej_rate
library(powerHDX)
times = c(5, 10, 20, 30, 40, 50, 60, 100, 300, 500, 900, 1200, 1500, 1800,
2100, 2400, 3600, 7200, 21600, 43200)
spec1 <- simulate_theoretical_spectra("PPAQHI", protection_factor = 10, charge = 1:3, times = times)
spec2 <- simulate_theoretical_spectra("PPAQHI", protection_factor = 20, charge = 1:3, times = times)
spec3 <- simulate_theoretical_spectra("PPAQHI", protection_factor = 30, charge = 1:3, times = times)
spectra <- rbind(spec1, spec2, spec3)
a <- get_noisy_deuteration_curves(spectra,
compare_pairs = TRUE,
reference = "all",
n_runs = 4,
n_replicates = 10)
data <- a[[1]][[1]]
library(powerHaDeX)
times = c(5, 10, 20, 30, 40, 50, 60, 100, 300, 500, 900, 1200, 1500, 1800,
2100, 2400, 3600, 7200, 21600, 43200)
spec1 <- simulate_theoretical_spectra("PPAQHI", protection_factor = 10, charge = 1:3, times = times)
spec2 <- simulate_theoretical_spectra("PPAQHI", protection_factor = 20, charge = 1:3, times = times)
spec3 <- simulate_theoretical_spectra("PPAQHI", protection_factor = 30, charge = 1:3, times = times)
spectra <- rbind(spec1, spec2, spec3)
a <- get_noisy_deuteration_curves(spectra,
compare_pairs = TRUE,
reference = "all",
n_runs = 4,
n_replicates = 10)
data <- a[[1]][[1]]
?get_noisy_deuteration_curves
library(powerHaDeX)
times = c(5, 10, 20, 30, 40, 50, 60, 100, 300, 500, 900, 1200, 1500, 1800,
2100, 2400, 3600, 7200, 21600, 43200)
spec1 <- simulate_theoretical_spectra("PPAQHI", protection_factor = 10, charge = 1:3, times = times)
spec2 <- simulate_theoretical_spectra("PPAQHI", protection_factor = 20, charge = 1:3, times = times)
spec3 <- simulate_theoretical_spectra("PPAQHI", protection_factor = 30, charge = 1:3, times = times)
spectra <- rbind(spec1, spec2, spec3)
a <- get_noisy_deuteration_curves(spectra,
compare_pairs = TRUE,
reference = "all",
n_replicates = 4,
n_experiments  = 10)
data <- a[[1]][[1]]
States <- unique(data[["State"]])
data[["id"]] <- paste0(data[["Rep"]], data[["Charge"]], data[["Experimental_state"]])
Test <- aic <- loglik <- Test_statistic <- p_value <- NA
Times <- unique(data[["Exposure"]])
if(length(Times) > 2) {
knots <- unique(setdiff(data[["Exposure"]], c(max(data[["Exposure"]]), min(data[["Exposure"]]))))
X <- truncated_lines(data[["Exposure"]], knots)
colnames(X) <- c(paste0("knot_", as.character(knots)))
cv_fit <- glmnet(X, data[["Mass"]], alpha = 0, lambda = 0.001)
coefs <- coefficients(cv_fit)
X_reduced <- cbind(intercept = 1, X)[, which(as.logical(abs(coefs) >= 2*10^(-5)))]
} else {
if(length(Times) == 2) {
X_reduced <- rep(0, nrow(data))
}else{
stop("You must provide more than one time point.")
}
}
truncated_lines <- function(x, knots){
sapply(knots, function(kappa) {
(x - kappa)*(x > kappa)
})
}
library(lmerTest)
library(glmnet)
States <- unique(data[["State"]])
data[["id"]] <- paste0(data[["Rep"]], data[["Charge"]], data[["Experimental_state"]])
Test <- aic <- loglik <- Test_statistic <- p_value <- NA
Times <- unique(data[["Exposure"]])
if(length(Times) > 2) {
knots <- unique(setdiff(data[["Exposure"]], c(max(data[["Exposure"]]), min(data[["Exposure"]]))))
X <- truncated_lines(data[["Exposure"]], knots)
colnames(X) <- c(paste0("knot_", as.character(knots)))
cv_fit <- glmnet(X, data[["Mass"]], alpha = 0, lambda = 0.001)
coefs <- coefficients(cv_fit)
X_reduced <- cbind(intercept = 1, X)[, which(as.logical(abs(coefs) >= 2*10^(-5)))]
} else {
if(length(Times) == 2) {
X_reduced <- rep(0, nrow(data))
}else{
stop("You must provide more than one time point.")
}
}
model <- lmer(Mass ~ Exposure*State  + Exposure + (Exposure || State) + X_reduced,
data = data,
REML = FALSE)
model
model_reduced <- lmer(Mass ~ Exposure  + (1|Exposure) + X_reduced,
data = data,
REML = FALSE)
model_reduced
model <- lmer(Mass ~ Exposure*State  + Exposure + (1|Exposure) + (Exposure || State) + X_reduced,
data = data,
REML = FALSE)
model
model_reduced <- lmer(Mass ~ Exposure  + (1|Exposure) + X_reduced,
data = data,
REML = FALSE)
result <- anova(model, model_reduced)
aic <- AIC(model)
loglik <- as.numeric(logLik(model))
Test_statistic <- result$Chisq[2]
p_value <- result$`Pr(>Chisq)`[2]
p_value
(p_value <= significance_level)
data
a
data <- a[[6]][[10]]
States <- unique(data[["State"]])
data[["id"]] <- paste0(data[["Rep"]], data[["Charge"]], data[["Experimental_state"]])
Test <- aic <- loglik <- Test_statistic <- p_value <- NA
Times <- unique(data[["Exposure"]])
if(length(Times) > 2) {
knots <- unique(setdiff(data[["Exposure"]], c(max(data[["Exposure"]]), min(data[["Exposure"]]))))
X <- truncated_lines(data[["Exposure"]], knots)
colnames(X) <- c(paste0("knot_", as.character(knots)))
cv_fit <- glmnet(X, data[["Mass"]], alpha = 0, lambda = 0.001)
coefs <- coefficients(cv_fit)
X_reduced <- cbind(intercept = 1, X)[, which(as.logical(abs(coefs) >= 2*10^(-5)))]
} else {
if(length(Times) == 2) {
X_reduced <- rep(0, nrow(data))
}else{
stop("You must provide more than one time point.")
}
}
suppressMessages({
model <- lmer(Mass ~ Exposure*State  + Exposure + (1|Exposure) + (Exposure || State) + X_reduced,
data = data,
REML = FALSE)
model_reduced <- lmer(Mass ~ Exposure  + (1|Exposure) + X_reduced,
data = data,
REML = FALSE)
})
States <- unique(data[["State"]])
States
States <- unique(data[["State"]])
data[["id"]] <- paste0(data[["Rep"]], data[["Charge"]], data[["Experimental_state"]])
Test <- aic <- loglik <- Test_statistic <- p_value <- NA
Times <- unique(data[["Exposure"]])
if(length(Times) > 2) {
knots <- unique(setdiff(data[["Exposure"]], c(max(data[["Exposure"]]), min(data[["Exposure"]]))))
X <- truncated_lines(data[["Exposure"]], knots)
colnames(X) <- c(paste0("knot_", as.character(knots)))
cv_fit <- glmnet(X, data[["Mass"]], alpha = 0, lambda = 0.001)
coefs <- coefficients(cv_fit)
X_reduced <- cbind(intercept = 1, X)[, which(as.logical(abs(coefs) >= 2*10^(-5)))]
} else {
if(length(Times) == 2) {
X_reduced <- rep(0, nrow(data))
}else{
stop("You must provide more than one time point.")
}
}
suppressMessages({
model <- lmer(Mass ~ Exposure*Experimental_state  + Exposure + (1|Exposure) + (Exposure || Experimental_state) + X_reduced,
data = data,
REML = FALSE)
model_reduced <- lmer(Mass ~ Exposure  + (1|Exposure) + X_reduced,
data = data,
REML = FALSE)
})
result <- anova(model, model_reduced)
aic <- AIC(model)
loglik <- as.numeric(logLik(model))
Test_statistic <- result$Chisq[2]
p_value <- result$`Pr(>Chisq)`[2]
p_value
model <- lmer(Mass ~ Exposure*Experimental_state + (1|Exposure) + (Exposure || Experimental_state) + X_reduced,
data = data,
REML = FALSE)
model
?get_noisy_deuteration_curves
times = c(5, 10, 20, 30, 40, 50, 60, 100, 300, 500, 900, 1200, 1500, 1800,
2100, 2400, 3600, 7200, 21600, 43200)
length(times)
runif(21)
rnorm(21, 50, 10)
data
runif(21, 0, 0.5)
library(ggplot2)
library(dplyr)
library(stringr)
do_plot <- function(sim_results, pfs = unique(c(sim_results$State_1, sim_results$State_2))) {
# New facet label names for dose variable
pf1.labs <- paste("PF1 =", pfs)
names(pf1.labs) <- as.character(pfs)
# New facet label names for supp variable
pf2.labs <- paste("PF2 =", pfs)
names(pf2.labs) <- as.character(pfs)
p <- sim_results %>%
filter(State_1 %in% pfs, State_2 %in% pfs) %>%
ggplot(aes(x = Test_id, y = Power, fill = Test_id)) +
geom_col()+
ylab("Rejection rate") +
theme_minimal() +
ylim(0, 1.15) +
# geom_text(aes(label=Power), position=position_dodge(width=0.9), vjust=-0.25, size = 3) +
facet_grid(State_1~State_2, labeller = labeller(State_2 = pf1.labs, State_1 = pf2.labs)) +
ggtitle("Rejection rate in pairwise testing") +
theme(axis.text.x=element_blank(),
axis.title.x=element_blank(),
legend.position="bottom") +
theme(plot.title = element_text(hjust = 0.5))+
geom_label(aes(label = formatC(Power, digits = 2, width = 1)), show.legend = FALSE)
data_col <- sim_results %>%
filter(State_1 == State_2) %>%
filter(State_1 %in% pfs, State_2 %in% pfs)
p +
geom_rect(data = data_col, col = "black", fill = "white", xmin = -Inf, xmax = Inf,
ymin = -Inf, ymax = Inf, alpha = 0)
}
read_summarize_files <- function(path) {
files <- list.files(path = path, pattern = "\\.RDS$", full.names = TRUE)
do.call("rbind", lapply(files, readRDS)) %>%
filter(Transformation == "identity" | is.na(Transformation)) %>%
mutate(Test_id = paste0(Test, "_", Transformation)) %>%
filter(Time != "categorical" | is.na(Time)) %>%
select(-Time)
}
sim_res <- read_summarize_files("./results")
sim_res
_AAHL_power <- readRDS("G:/gits/HDX_sim_vol2/power_sim/model_slope/results/_AAHL_power.RDS")
a <- readRDS("G:/gits/HDX_sim_vol2/power_sim/model_slope/results/_AAHL_power.RDS")
a
sim_res <- read_summarize_files("./results")
sim_res
setwd("G:/gits/HDX_sim_vol2/power_sim/model_slope")
sim_res <- read_summarize_files("./results")
sim_res
tests <- c("Houde_NA",
"Semiparametric model_identity"
)
plot_rej_rate <- sim_res_houde %>%
filter(Sequence %in% intersect(Sequence, sim_res$Sequence)) %>%
rbind(sim_res) %>%
group_by(Test_id, State_1, State_2) %>%
summarise(Power = round(mean(Significant_difference, na.rm = TRUE), 2)) %>%
ungroup() %>%
do_plot(pfs = unique(sim_res$State_1)) +
# scale_fill_manual(name = "Test",
#                   values = col_plt3,
#                   labels = c("HDX-Analyzer", "Houde","MEMHDX",
#                              "LASSO id", "RIDGE exposure id", "RIDGE id"))
scale_fill_brewer(name = "Test",
labels = c("Houde","Semiparametric model"))
plot_rej_rate <- sim_res %>%
group_by(Test_id, State_1, State_2) %>%
summarise(Power = round(mean(Significant_difference, na.rm = TRUE), 2)) %>%
ungroup() %>%
do_plot(pfs = unique(sim_res$State_1)) +
# scale_fill_manual(name = "Test",
#                   values = col_plt3,
#                   labels = c("HDX-Analyzer", "Houde","MEMHDX",
#                              "LASSO id", "RIDGE exposure id", "RIDGE id"))
scale_fill_brewer(name = "Test",
labels = c("Houde","Semiparametric model"))
plot_rej_rate
