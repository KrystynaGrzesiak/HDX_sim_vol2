}))
spectra_by_seq <- split(theoretical_spectra,
f = theoretical_spectra[, c("Sequence")])
spectra_by_seq
all_params <- params %>%
dplyr::select(sequence, pH, step) %>%
unique() %>%
filter(sequence %in% sequences, pH == "6") %>%
group_by(sequence) %>%
slice(rep(1:n(), each = length(new_pf))) %>%
mutate(protection_factor = new_pf) %>%
ungroup() %>%
data.frame()
all_params
all_params <- params %>%
dplyr::select(sequence, pH, step) %>%
unique() %>%
filter(sequence %in% sequences, pH == "6") %>%
group_by(sequence) %>%
slice(rep(1:n(), each = length(new_pf))) %>%
mutate(protection_factor = new_pf) %>%
ungroup() %>%
data.frame()
theoretical_spectra <- do.call(rbind, lapply(1:nrow(all_params), function(ith_row) {
simulate_theoretical_spectra(sequence = all_params[ith_row, "sequence"],
charge = 1:3,
protection_factor = all_params[ith_row, "protection_factor"],
times = times,
pH = all_params[ith_row, "pH"],
temperature = 15,
n_molecules = 500,
time_step_const = 1,
use_markov = TRUE)
}))
spectra_by_seq <- split(theoretical_spectra,
f = theoretical_spectra[, c("Sequence")])
spectra_by_seq
theoretical_spectra
spectra_by_seq <- split(theoretical_spectra,
f = theoretical_spectra[, c("Sequence")]) %>%
data.frame()
spectra_by_seq
spectra_by_seq <- split(theoretical_spectra,
f = theoretical_spectra[, c("Sequence")])
lapply(
spectra_list, function(spectrum) {
tests_results = tryCatch({
noisy_curves = get_noisy_deuteration_curves(spectrum, compare_pairs = TRUE,
reference = "all",
n_runs = 4,
n_replicates = 100,
mass_deviations = 5,
per_run_deviations = 0.1)
calculate_hdx_power(noisy_curves,
tests = list(deuteros, S1, S2, S3, S4, S5, S6, memhdx_model),
significance_level  = 0.05,
summarized = FALSE)
}, error = function(e) data.table::data.table())
seq = as.character(unique(noisy_curves[[1]][[1]]$Sequence))
saveRDS(tests_results, file = paste("./results/", seq, "power.RDS", sep = "_"))
})
spectra_list <- spectra_by_seq
lapply(
spectra_list, function(spectrum) {
tests_results = tryCatch({
noisy_curves = get_noisy_deuteration_curves(spectrum, compare_pairs = TRUE,
reference = "all",
n_runs = 4,
n_replicates = 100,
mass_deviations = 5,
per_run_deviations = 0.1)
calculate_hdx_power(noisy_curves,
tests = list(deuteros, S1, S2, S3, S4, S5, S6, memhdx_model),
significance_level  = 0.05,
summarized = FALSE)
}, error = function(e) data.table::data.table())
seq = as.character(unique(noisy_curves[[1]][[1]]$Sequence))
saveRDS(tests_results, file = paste("./results/", seq, "power.RDS", sep = "_"))
})
lapply(
spectra_list, function(spectrum) {
tests_results = tryCatch({
noisy_curves = get_noisy_deuteration_curves(spectrum, compare_pairs = TRUE,
reference = "all",
n_runs = 4,
n_replicates = 100,
mass_deviations = 5,
per_run_deviations = 0.1)
calculate_hdx_power(noisy_curves,
tests = list(S1),
significance_level  = 0.05,
summarized = FALSE)
}, error = function(e) data.table::data.table())
seq = as.character(unique(noisy_curves[[1]][[1]]$Sequence))
saveRDS(tests_results, file = paste("./results/", seq, "power.RDS", sep = "_"))
})
library(powerHDX)
library(dplyr)
library(doParallel)
library(mgcv)
new_pf <- c(10, 15, 20, 30, 40, 45, 50, seq(100, 2000, 100))
times = c(5, 10, 20, 30, 40, 50, 60, 100, 300, 500, 900, 1200, 1500, 1800,
2100, 2400, 3600, 7200, 21600, 43200)
set.seed(18)
params <- readRDS("./all_params.RDS")
sequences <- sample(unique(params$sequence), 1, replace = FALSE)
all_params <- params %>%
dplyr::select(sequence, pH, step) %>%
unique() %>%
filter(sequence %in% sequences, pH == "6") %>%
group_by(sequence) %>%
slice(rep(1:n(), each = length(new_pf))) %>%
mutate(protection_factor = new_pf) %>%
ungroup() %>%
data.frame()
theoretical_spectra <- do.call(rbind, lapply(1:nrow(all_params), function(ith_row) {
simulate_theoretical_spectra(sequence = all_params[ith_row, "sequence"],
charge = 1:3,
protection_factor = all_params[ith_row, "protection_factor"],
times = times,
pH = all_params[ith_row, "pH"],
temperature = 15,
n_molecules = 500,
time_step_const = 1,
use_markov = TRUE)
}))
spectra_by_seq <- split(theoretical_spectra,
f = theoretical_spectra[, c("Sequence")])
spectra_list <- spectra_by_seq
wyniki <- lapply(
spectra_list, function(spectrum) {
tests_results = tryCatch({
noisy_curves = get_noisy_deuteration_curves(spectrum, compare_pairs = TRUE,
reference = "all",
n_runs = 4,
n_replicates = 100,
mass_deviations = 5,
per_run_deviations = 0.1)
calculate_hdx_power(noisy_curves,
tests = list(S1),
significance_level  = 0.05,
summarized = FALSE)
}, error = function(e) data.table::data.table())
seq = as.character(unique(noisy_curves[[1]][[1]]$Sequence))
saveRDS(tests_results, file = paste("./results/", seq, "power.RDS", sep = "_"))
})
new_pf <- c(10, 15, 20, 30, 40, 45, 50)
times = c(5, 10, 20, 30, 40, 50, 60, 100, 300, 500, 900, 1200, 1500, 1800,
2100, 2400, 3600, 7200, 21600, 43200)
set.seed(18)
params <- readRDS("./all_params.RDS")
sequences <- sample(unique(params$sequence), 1, replace = FALSE)
all_params <- params %>%
dplyr::select(sequence, pH, step) %>%
unique() %>%
filter(sequence %in% sequences, pH == "6") %>%
group_by(sequence) %>%
slice(rep(1:n(), each = length(new_pf))) %>%
mutate(protection_factor = new_pf) %>%
ungroup() %>%
data.frame()
theoretical_spectra <- do.call(rbind, lapply(1:nrow(all_params), function(ith_row) {
simulate_theoretical_spectra(sequence = all_params[ith_row, "sequence"],
charge = 1:3,
protection_factor = all_params[ith_row, "protection_factor"],
times = times,
pH = all_params[ith_row, "pH"],
temperature = 15,
n_molecules = 500,
time_step_const = 1,
use_markov = TRUE)
}))
spectra_list <- spectra_by_seq
spectra_by_seq <- split(theoretical_spectra,
f = theoretical_spectra[, c("Sequence")])
theoretical_spectra
spectra_list <- spectra_by_seq
wyniki <- lapply(
spectra_list, function(spectrum) {
tests_results = tryCatch({
noisy_curves = get_noisy_deuteration_curves(spectrum, compare_pairs = TRUE,
reference = "all",
n_runs = 4,
n_replicates = 100,
mass_deviations = 5,
per_run_deviations = 0.1)
calculate_hdx_power(noisy_curves,
tests = list(S1),
significance_level  = 0.05,
summarized = FALSE)
}, error = function(e) data.table::data.table())
seq = as.character(unique(noisy_curves[[1]][[1]]$Sequence))
saveRDS(tests_results, file = paste("./results/", seq, "power.RDS", sep = "_"))
})
library(powerHDX)
library(dplyr)
library(doParallel)
library(mgcv)
new_pf <- c(10, 15, 20, 30, 40, 45, 50, seq(100, 2000, 100))
set.seed(17)
params <- readRDS("./all_params.RDS")
sequences <- sample(unique(params$sequence), 1, replace = FALSE)
times = c(5, 10, 20, 30, 40, 50, 60, 100, 300, 500, 900, 1200, 1500, 1800,
2100, 2400, 3600, 7200, 21600, 43200)
all_params <- params %>%
dplyr::select(sequence, pH, step) %>%
unique() %>%
filter(sequence %in% sequences, pH == "6") %>%
group_by(sequence) %>%
slice(rep(1:n(), each = length(new_pf))) %>%
mutate(protection_factor = new_pf) %>%
# mutate(charge = sample(1:5,length(new_pf),  replace = TRUE)) %>%
ungroup() %>%
data.frame()
new_pf <- c(10, 15, 20, 30, 40, 45, 50, seq(100, 2000, 100))
times = c(5, 10, 20, 30)
new_pf <- c(10, 15, 20, 30)
times = c(5, 10, 20, 30, 40, 50, 60, 100, 300, 500, 900, 1200, 1500, 1800,
2100, 2400, 3600, 7200, 21600, 43200)
set.seed(17)
params <- readRDS("./all_params.RDS")
sequences <- sample(unique(params$sequence), 1, replace = FALSE)
all_params <- params %>%
dplyr::select(sequence, pH, step) %>%
unique() %>%
filter(sequence %in% sequences, pH == "6") %>%
group_by(sequence) %>%
slice(rep(1:n(), each = length(new_pf))) %>%
mutate(protection_factor = new_pf) %>%
# mutate(charge = sample(1:5,length(new_pf),  replace = TRUE)) %>%
ungroup() %>%
data.frame()
theoretical_spectra <- do.call(rbind, lapply(1:nrow(all_params), function(ith_row) {
simulate_theoretical_spectra(sequence = all_params[ith_row, "sequence"],
charge = 1:3,
protection_factor = all_params[ith_row, "protection_factor"],
times = times,
pH = all_params[ith_row, "pH"],
temperature = 15,
n_molecules = 500,
time_step_const = 1,
use_markov = TRUE)
}))
spectra_by_seq <- split(theoretical_spectra,
f = theoretical_spectra[, c("Sequence")])
spectra_by_seq
print("Spectra ok!")
get_power = function(spectra_list, n_cores) {
mclapply(
spectra_list, function(spectrum) {
tests_results = tryCatch({
noisy_curves = get_noisy_deuteration_curves(spectrum, compare_pairs = TRUE,
reference = "all",
n_runs = 4,
n_replicates = 1,
mass_deviations = 5,
per_run_deviations = 0.1)
calculate_hdx_power(noisy_curves,
tests = list(deuteros, S1, S2, S3, S4, S5, S6, memhdx_model),
significance_level  = 0.05,
summarized = FALSE)
}, error = function(e) data.table::data.table())
seq = as.character(unique(noisy_curves[[1]][[1]]$Sequence))
saveRDS(tests_results, file = paste("./results/", seq, "power.RDS", sep = "_"))
}, mc.cores = n_cores
)
}
get_power = function(spectra_list, n_cores) {
lapply(
spectra_list, function(spectrum) {
tests_results = tryCatch({
noisy_curves = get_noisy_deuteration_curves(spectrum, compare_pairs = TRUE,
reference = "all",
n_runs = 4,
n_replicates = 1,
mass_deviations = 5,
per_run_deviations = 0.1)
calculate_hdx_power(noisy_curves,
tests = list(deuteros, S1, S2, S3, S4, S5, S6, memhdx_model),
significance_level  = 0.05,
summarized = FALSE)
}, error = function(e) data.table::data.table())
seq = as.character(unique(noisy_curves[[1]][[1]]$Sequence))
saveRDS(tests_results, file = paste("./results/", seq, "power.RDS", sep = "_"))
}
)
}
cores = detectCores()
get_power(spectra_by_seq, cores)
devtools::install_github("hadexversum/powerHDX")
detach("package:powerHDX", unload = TRUE)
devtools::install_github("hadexversum/powerHDX")
C:\Users\Kanti\Documents\R\win-library\4.0
devtools::install_github("hadexversum/powerHDX")
library(powerHDX)
library(dplyr)
library(doParallel)
library(mgcv)
new_pf <- c(10, 15, 20, 30)
times = c(5, 10, 20, 30, 40, 50, 60, 100, 300, 500, 900, 1200, 1500, 1800,
2100, 2400, 3600, 7200, 21600, 43200)
set.seed(17)
params <- readRDS("./all_params.RDS")
sequences <- sample(unique(params$sequence), 1, replace = FALSE)
all_params <- params %>%
dplyr::select(sequence, pH, step) %>%
unique() %>%
filter(sequence %in% sequences, pH == "6") %>%
group_by(sequence) %>%
slice(rep(1:n(), each = length(new_pf))) %>%
mutate(protection_factor = new_pf) %>%
# mutate(charge = sample(1:5,length(new_pf),  replace = TRUE)) %>%
ungroup() %>%
data.frame()
theoretical_spectra <- do.call(rbind, lapply(1:nrow(all_params), function(ith_row) {
simulate_theoretical_spectra(sequence = all_params[ith_row, "sequence"],
charge = 1:3,
protection_factor = all_params[ith_row, "protection_factor"],
times = times,
pH = all_params[ith_row, "pH"],
temperature = 15,
n_molecules = 500,
time_step_const = 1,
use_markov = TRUE)
}))
spectra_by_seq <- split(theoretical_spectra,
f = theoretical_spectra[, c("Sequence")])
print("Spectra ok!")
get_power = function(spectra_list, n_cores) {
lapply(
spectra_list, function(spectrum) {
tests_results = tryCatch({
noisy_curves = get_noisy_deuteration_curves(spectrum, compare_pairs = TRUE,
reference = "all",
n_runs = 4,
n_replicates = 1,
mass_deviations = 5,
per_run_deviations = 0.1)
calculate_hdx_power(noisy_curves,
tests = list(deuteros, S1, S2, S3, S4, S5, S6, memhdx_model),
significance_level  = 0.05,
summarized = FALSE)
}, error = function(e) data.table::data.table())
seq = as.character(unique(noisy_curves[[1]][[1]]$Sequence))
saveRDS(tests_results, file = paste("./results/", seq, "power.RDS", sep = "_"))
}
)
}
cores = detectCores()
get_power(spectra_by_seq)
debug(calculate_hdx_power)
get_power = function(spectra_list, n_cores) {
lapply(
spectra_list, function(spectrum) {
tests_results = tryCatch({
noisy_curves = get_noisy_deuteration_curves(spectrum, compare_pairs = TRUE,
reference = "all",
n_runs = 4,
n_replicates = 1,
mass_deviations = 5,
per_run_deviations = 0.1)
calculate_hdx_power(noisy_curves,
tests = list(deuteros, S1, S2, S3, S4, S5, S6, memhdx_model),
significance_level  = 0.05,
summarized = FALSE)
}, error = function(e) data.table::data.table())
seq = as.character(unique(noisy_curves[[1]][[1]]$Sequence))
saveRDS(tests_results, file = paste("./results/", seq, "power.RDS", sep = "_"))
}
)
}
cores = detectCores()
get_power(spectra_by_seq)
spectra_list = spectra_by_seq
new_pf <- c(10, 15, 20, 30)
times = c(5, 10, 20, 30, 40, 50, 60, 100, 300, 500, 900, 1200, 1500, 1800,
2100, 2400, 3600, 7200, 21600, 43200)
set.seed(17)
params <- readRDS("./all_params.RDS")
sequences <- sample(unique(params$sequence), 1, replace = FALSE)
all_params <- params %>%
dplyr::select(sequence, pH, step) %>%
unique() %>%
filter(sequence %in% sequences, pH == "6") %>%
group_by(sequence) %>%
slice(rep(1:n(), each = length(new_pf))) %>%
mutate(protection_factor = new_pf) %>%
# mutate(charge = sample(1:5,length(new_pf),  replace = TRUE)) %>%
ungroup() %>%
data.frame()
theoretical_spectra <- do.call(rbind, lapply(1:nrow(all_params), function(ith_row) {
simulate_theoretical_spectra(sequence = all_params[ith_row, "sequence"],
charge = 1:3,
protection_factor = all_params[ith_row, "protection_factor"],
times = times,
pH = all_params[ith_row, "pH"],
temperature = 15,
n_molecules = 500,
time_step_const = 1,
use_markov = TRUE)
}))
spectra_by_seq <- split(theoretical_spectra,
f = theoretical_spectra[, c("Sequence")])
spectra_by_seq
spectra_list = spectra_by_seq[[1]]
spectra_list
noisy_curves = get_noisy_deuteration_curves(spectrum, compare_pairs = TRUE,
reference = "all",
n_runs = 4,
n_replicates = 1,
mass_deviations = 5,
per_run_deviations = 0.1)
spectrum = spectra_list
noisy_curves = get_noisy_deuteration_curves(spectrum, compare_pairs = TRUE,
reference = "all",
n_runs = 4,
n_replicates = 1,
mass_deviations = 5,
per_run_deviations = 0.1)
noisy_curves
calculate_hdx_power(noisy_curves,
tests = list(deuteros, S1, S2, S3, S4, S5, S6, memhdx_model),
significance_level  = 0.05,
summarized = FALSE)
tests = list(deuteros, S1, S2, S3, S4, S5, S6, memhdx_model)
significance_level  = 0.05
summarized = FALSE
deuteration_curves = noisy_curves
Significant_difference = Sequence = Rep = State = Exposure = NULL
curve = deuteration_curves [[1]]
replicate_curve = curve[[1]]
replicate_curve
uniqueN(replicate_curve[["State"]]) == 1 & uniqueN(replicate_curve[["Experimental_state"]]) == 2
library(data.table)
uniqueN(replicate_curve[["State"]]) == 1 & uniqueN(replicate_curve[["Experimental_state"]]) == 2
if(uniqueN(replicate_curve[["State"]]) == 1 & uniqueN(replicate_curve[["Experimental_state"]]) == 2) {
replicate_curve[["State"]] = paste0(replicate_curve[["State"]],
replicate_curve[["Experimental_state"]])
info = replicate_curve[, list(Sequence = unique(Sequence),
Num_replicates = uniqueN(Rep),
Num_states = 2,
Num_timepoints = uniqueN(Exposure))]
type_one_err = TRUE
}else {
type_one_err = FALSE
info = replicate_curve[, list(Sequence = unique(Sequence),
Num_replicates = uniqueN(Rep),
Num_states = uniqueN(State),
Num_timepoints = uniqueN(Exposure))]
}
info
replicate_curve[, id := as.numeric(paste0(Rep, Charge, match(Experimental_state, LETTERS)))]
replicate_curve
library(powerHDX)
library(dplyr)
library(doParallel)
library(mgcv)
library(data.table)
new_pf <- c(10, 15, 20, 30)
times = c(5, 10, 20, 30, 40, 50, 60, 100, 300, 500, 900, 1200, 1500, 1800,
2100, 2400, 3600, 7200, 21600, 43200)
set.seed(17)
params <- readRDS("./all_params.RDS")
sequences <- sample(unique(params$sequence), 1, replace = FALSE)
all_params <- params %>%
dplyr::select(sequence, pH, step) %>%
unique() %>%
filter(sequence %in% sequences, pH == "6") %>%
group_by(sequence) %>%
slice(rep(1:n(), each = length(new_pf))) %>%
mutate(protection_factor = new_pf) %>%
# mutate(charge = sample(1:5,length(new_pf),  replace = TRUE)) %>%
ungroup() %>%
data.frame()
theoretical_spectra <- do.call(rbind, lapply(1:nrow(all_params), function(ith_row) {
simulate_theoretical_spectra(sequence = all_params[ith_row, "sequence"],
charge = 1:3,
protection_factor = all_params[ith_row, "protection_factor"],
times = times,
pH = all_params[ith_row, "pH"],
temperature = 15,
n_molecules = 500,
time_step_const = 1,
use_markov = TRUE)
}))
spectra_by_seq <- split(theoretical_spectra,
f = theoretical_spectra[, c("Sequence")])
print("Spectra ok!")
get_power = function(spectra_list) {
lapply(
spectra_list, function(spectrum) {
tests_results = tryCatch({
noisy_curves = get_noisy_deuteration_curves(spectrum, compare_pairs = TRUE,
reference = "all",
n_runs = 4,
n_replicates = 1,
mass_deviations = 5,
per_run_deviations = 0.1)
calculate_hdx_power(noisy_curves,
tests = list(deuteros, S1, S2, S3, S4, S5, S6, memhdx_model),
significance_level  = 0.05,
summarized = FALSE)
}, error = function(e) data.table::data.table())
seq = as.character(unique(noisy_curves[[1]][[1]]$Sequence))
saveRDS(tests_results, file = paste("./results/", seq, "power.RDS", sep = "_"))
}
)
}
cores = detectCores()
get_power(spectra_by_seq)
undebug(calculate_hdx_power)
get_power(spectra_by_seq)
