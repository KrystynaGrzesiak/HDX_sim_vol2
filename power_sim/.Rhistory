plot_fitting <- grid.arrange(bottom_plot, top_plot, nrow = 2,
top = textGrob("Knot at 3600 and random intercept among different curves", gp = gpar(fontsize = 20)))
plot_fitting <- grid.arrange(bottom_plot, top_plot, nrow = 2,
top = textGrob("Knot at 3600 and random intercept among different curves", gp = gpar(fontsize = 15)))
library(powerHDX)
library(xtable)
library(gridExtra)
library(grid)
truncated_lines <- function(x, kappa){
(x - kappa)*(x > kappa)
}
set.seed(17)
times = c(5, 10, 20, 30, 40, 50, 60, 100, 300, 500, 900, 1200, 1500, 1800,
2100, 2400, 3600, 7200, 21600, 43200)
spec1 <- simulate_theoretical_spectra("LVRKDLQN", protection_factor = 10, charge = 1:3, times = times)
spec2 <- simulate_theoretical_spectra("LVRKDLQN", protection_factor = 40, charge = 1:3, times = times)
spec <- rbind(spec1, spec2)
data <- get_noisy_deuteration_curves(spec,
compare_pairs = TRUE,
reference = "all",
n_replicates = 1)[[1]][[1]]
significance_level = 0.05
data[["id"]] <- paste0(data$Rep, data$Charge, data$Experimental_state)
States = unique(data$State)
K <- 3600
X <- truncated_lines(data$Exposure, K)
model = lmerTest::lmer(Mass ~ Exposure*State + (1|id) + X,
data = data,
REML = FALSE)
fitted <- fitted.values(model)
top_plot <- data %>%
mutate(fitted = fitted) %>%
rename("PF" = State) %>%
ggplot(aes(x = Exposure, y = Mass, col = PF)) +
geom_point(alpha = 0.4) +
geom_line(aes(x = Exposure, y = fitted, col = PF), size = 1) +
theme_minimal() +
xlim(0, 7200) +
scale_color_manual(values=c("chocolate2", "royalblue")) +
theme(legend.position="bottom")
bottom_plot <- data %>%
mutate(fitted = fitted) %>%
rename("PF" = State) %>%
ggplot(aes(x = Exposure, y = Mass, col = PF)) +
geom_point(alpha = 0.4) +
geom_line(aes(x = Exposure, y = fitted, col = PF), size = 1) +
theme_minimal() +
scale_color_manual(values=c("chocolate2", "royalblue")) +
facet_wrap(~PF, labeller = label_both) +
theme(legend.position='none')
plot_fitting <- grid.arrange(bottom_plot, top_plot, nrow = 2,
top = textGrob("Sequence: LVRKDLQN. Knot at 3600 and random intercept among different curves", gp = gpar(fontsize = 15)))
top_plot <- data %>%
mutate(fitted = fitted) %>%
rename("PF" = State) %>%
ggplot(aes(x = Exposure, y = Mass, col = PF)) +
geom_point(alpha = 0.4) +
geom_line(aes(x = Exposure, y = fitted, col = PF), size = 1) +
theme_minimal() +
scale_color_manual(values=c("chocolate2", "royalblue")) +
theme(legend.position="bottom")
bottom_plot <- data %>%
mutate(fitted = fitted) %>%
rename("PF" = State) %>%
ggplot(aes(x = Exposure, y = Mass, col = PF)) +
geom_point(alpha = 0.4) +
geom_line(aes(x = Exposure, y = fitted, col = PF), size = 1) +
theme_minimal() +
xlim(0, 7200) +
scale_color_manual(values=c("chocolate2", "royalblue")) +
facet_wrap(~PF, labeller = label_both) +
theme(legend.position='none')
plot_fitting <- grid.arrange(bottom_plot, top_plot, nrow = 2,
top = textGrob("Sequence: LVRKDLQN. Knot at 3600 and random intercept among different curves", gp = gpar(fontsize = 15)))
plot_fitting <- grid.arrange(bottom_plot, top_plot, nrow = 2,
top = textGrob("Sequence: LVRKDLQN.
Knot at 3600 and random intercept among different curves", gp = gpar(fontsize = 15)))
plot_fitting <- grid.arrange(bottom_plot, top_plot, nrow = 2,
top = textGrob("Sequence: LVRKDLQN. Knot at 3600 and random intercept among different curves", gp = gpar(fontsize = 15)))
top_plot <- data %>%
mutate(fitted = fitted) %>%
rename("PF" = State) %>%
ggplot(aes(x = Exposure, y = Mass, col = PF)) +
geom_point(alpha = 0.4) +
geom_point(aes(x = Exposure, y = fitted, col = PF), size = 1) +
theme_minimal() +
scale_color_manual(values=c("chocolate2", "royalblue")) +
theme(legend.position="bottom")
top_plot
deuteros
significance_level = 0.05
data[["id"]] <- paste0(data$Rep, data$Charge, data$Experimental_state)
States = unique(data$State)
model = lm(Mass ~ Exposure*State,
data = data)
fitted <- fitted.values(model)
top_plot <- data %>%
mutate(fitted = fitted) %>%
rename("PF" = State) %>%
ggplot(aes(x = Exposure, y = Mass, col = PF)) +
geom_point(alpha = 0.4) +
geom_line(aes(x = Exposure, y = fitted, col = PF), size = 1) +
theme_minimal() +
scale_color_manual(values=c("chocolate2", "royalblue")) +
theme(legend.position="bottom")
bottom_plot <- data %>%
mutate(fitted = fitted) %>%
rename("PF" = State) %>%
ggplot(aes(x = Exposure, y = Mass, col = PF)) +
geom_point(alpha = 0.4) +
geom_line(aes(x = Exposure, y = fitted, col = PF), size = 1) +
theme_minimal() +
xlim(0, 7200) +
scale_color_manual(values=c("chocolate2", "royalblue")) +
facet_wrap(~PF, labeller = label_both) +
theme(legend.position='none')
plot_fitting <- grid.arrange(bottom_plot, top_plot, nrow = 2,
top = textGrob("Sequence: LVRKDLQN. Knot at 3600 and random intercept among different curves", gp = gpar(fontsize = 15)))
plot_fitting <- grid.arrange(bottom_plot, top_plot, nrow = 2,
top = textGrob("Sequence: LVRKDLQN. HDX - Analyzer", gp = gpar(fontsize = 15)))
library(powerHDX)
times = c(5, 10, 20, 30, 40, 50, 60, 100, 300, 500, 900, 1200, 1500, 1800,
2100, 2400, 3600, 7200, 21600, 43200)
spec1 <- simulate_theoretical_spectra("PPAQHI", protection_factor = 10, charge = 1:3, times = times)
spec2 <- simulate_theoretical_spectra("PPAQHI", protection_factor = 20, charge = 1:3, times = times)
spec3 <- simulate_theoretical_spectra("PPAQHI", protection_factor = 30, charge = 1:3, times = times)
spectra <- rbind(spec1, spec2, spec3)
a <- get_noisy_deuteration_curves(spectra,
compare_pairs = TRUE,
reference = "all",
n_runs = 4,
n_replicates = 1)
data <- a[[1]][[1]]
significance_level = 0.05
data
data
data.frame(data)
a
States = unique(data$State)
aic = loglik = Test_statistic = p_value = rep(NA, 2)
data[["Exposure"]] = log(data[["Exposure"]] + 1)
knots <- unique(setdiff(data$Exposure, c(max(data$Exposure), min(data$Exposure))))
X <- sapply(1:length(knots), function(knot) {
truncated_lines(data$Exposure, knots[knot])
})
truncated_lines <- function(x, kappa){
(x - kappa)*(x > kappa)
}
X
X <- sapply(1:length(knots), function(knot) {
truncated_lines(data$Exposure, knots[knot])
})
X
data[["Experimental_state"]] == "A"
data[["Exposure"]]*(data[["Experimental_state"]] == "A")
design_matrix <- cbind(data[["Exposure"]],
data[["Experimental_state"]] == "A",
X,
data[["Exposure"]]*(data[["Experimental_state"]] == "A"))
colnames(design_matrix) <- c("State", as.character(knots), "Exposure_State")
colnames(design_matrix) <- c("Exposure", "State", as.character(knots), "Exposure_State")
cv_fit <- cv.glmnet(design_matrix, data[["Mass"]], alpha = 1)
library(glmnet)
cv_fit <- cv.glmnet(design_matrix, data[["Mass"]], alpha = 1)
cv_fit
summary(cv_fit)
coef(cv_fit)
aic = loglik = Test_statistic = p_value = rep(NA, 2)
data[["Exposure"]] = data[["Exposure"]]
knots <- unique(setdiff(data$Exposure, c(max(data$Exposure), min(data$Exposure))))
X <- sapply(1:length(knots), function(knot) {
truncated_lines(data$Exposure, knots[knot])
})
design_matrix <- cbind(data[["Exposure"]],
data[["Experimental_state"]] == "A",
X,
data[["Exposure"]]*(data[["Experimental_state"]] == "A"))
colnames(design_matrix) <- c("Exposure", "State", as.character(knots), "Exposure_State")
cv_fit <- cv.glmnet(design_matrix, data[["Mass"]], alpha = 1)
coef(cv_fit)
aic = loglik = Test_statistic = p_value = rep(NA, 2)
data[["Exposure"]] = data[["Exposure"]]
knots <- unique(setdiff(data$Exposure, c(max(data$Exposure), min(data$Exposure))))
X <- sapply(1:length(knots), function(knot) {
truncated_lines(data$Exposure, knots[knot])
})
knots
library(powerHDX)
times = c(5, 10, 20, 30, 40, 50, 60, 100, 300, 500, 900, 1200, 1500, 1800,
2100, 2400, 3600, 7200, 21600, 43200)
spec1 <- simulate_theoretical_spectra("PPAQHI", protection_factor = 10, charge = 1:3, times = times)
spec2 <- simulate_theoretical_spectra("PPAQHI", protection_factor = 20, charge = 1:3, times = times)
spec3 <- simulate_theoretical_spectra("PPAQHI", protection_factor = 30, charge = 1:3, times = times)
spectra <- rbind(spec1, spec2, spec3)
a <- get_noisy_deuteration_curves(spectra,
compare_pairs = TRUE,
reference = "all",
n_runs = 4,
n_replicates = 1)
data <- a[[1]][[1]]
States = unique(data$State)
aic = loglik = Test_statistic = p_value = rep(NA, 2)
data[["Exposure"]] = data[["Exposure"]]
knots <- unique(setdiff(data$Exposure, c(max(data$Exposure), min(data$Exposure))))
X <- sapply(1:length(knots), function(knot) {
truncated_lines(data$Exposure, knots[knot])
})
design_matrix <- cbind(data[["Exposure"]],
data[["Experimental_state"]] == "A",
X,
data[["Exposure"]]*(data[["Experimental_state"]] == "A"))
colnames(design_matrix) <- c("Exposure", "State", as.character(knots), "Exposure_State")
cv_fit <- cv.glmnet(design_matrix, data[["Mass"]], alpha = 1)
m1 <- glmnet(design_matrix, data[["Mass"]],
alpha = 1,
lambda = 0.01)
summary(cv_fit)
coef(cv_fit)
summary(cv_fit)
summary(cv_fit)$glmnet.fit
res <- summary(cv_fit)
res
str(res)
res[, lambda]
summary(m1)
summary(m1)$beta
str(m1)
m1$beta
str(m1)
cv_fit$glmnet.fit
cv_fit
summary(cv_fit)
m1
m1$beta
m1 <- glmnet(design_matrix, data[["Mass"]],
alpha = 1,
lambda = 0.001)
m1$beta
m1 <- glmnet(design_matrix, data[["Mass"]],
alpha = 1)
m1$beta
m1 <- glmnet(design_matrix, data[["Mass"]],
alpha = 1,
lambda = 0.005)
summary(m1)
m1$beta
m1 <- glmnet(design_matrix, data[["Mass"]],
alpha = 0,
lambda = 0.005)
summary(m1)
m1$beta
design_matrix
dim(design_matrix)
m2 <- glmnet(design_matrix[, -c(2, 22)], data[["Mass"]],
alpha = 0,
lambda = 0.005)
beta$m2
m2$beta
anova(m1, m2)
library(gslope)
g <- gslope(design_matrix)
g
plot(g)
graph_plot(g)
plot(g)
plot(g, type ="corr")
plot(g, plt  ="corr")
g$graph
r <- c(2,
2.5,
3,
3.5,
4,
4.5,
5,
5.5,
6,
6.5,
6.53,
6.53,
7.03,
7.53,
8.03,
8.53,
9.03,
9.53,
10.03,
10.53,
11.03,
11.53)
sigma_r <- c(0,
0.899730545,
1.843938668,
2.826814285,
3.84405306,
4.892321363,
5.968951246,
7.071752865,
8.198892351,
9.348808629,
9.418497543,
9.418303838,
11.41977993,
13.03595537,
14.35973679,
15.457627,
16.37824334,
17.1577941,
17.82369394,
18.39700753,
18.8941361,
19.32800366)
sigma_t <- c(3.5,
5.515242395,
7.63010695,
9.831580073,
12.11002079,
14.45796233,
16.86942896,
19.3395158,
21.86411529,
24.4397309,
24.59582213,
38.59669616,
36.59522007,
34.97904463,
33.65526321,
32.557373,
31.63675666,
30.8572059,
30.19130606,
29.61799247,
29.1208639,
28.68699634)
df <- data.frame(r = rep(r, 2),
naprezenia = c(sigma_r, sigma_t),
sigma = c(rep("sigma r", length(sigma_r)), rep("sigma t", length(sigma_t))))
library(ggplot2)
library(dplyr)
k1 <- df %>%
filter(r == 6.53 | naprezenia == 9.41)
ggplot(df, aes(x = r, y = naprezenia, col = sigma)) +
geom_vline(xintercept = 6.53, linetype = "dashed") +
geom_line() +
theme_minimal() +
scale_color_manual(values=c("tomato", "dodgerblue3")) +
geom_point(k1, mapping = aes(x = r, y = naprezenia), col = "black") +
ggtitle("Wykres naprężeń wtórnych") +
xlab("Strefa plastyczna                       Strefa sprężysta") +
theme(plot.title = element_text(hjust = 0.5)) +
ylab("Naprężenia [MPa]")
ggplot(df, aes(x = r, y = naprezenia, col = sigma)) +
geom_line() +
theme_minimal() +
scale_color_manual(values=c("tomato", "dodgerblue3")) +
geom_point(k1, mapping = aes(x = r, y = naprezenia), col = "black") +
ggtitle("Wykres naprężeń wtórnych") +
xlab("Strefa plastyczna                       Strefa sprężysta") +
theme(plot.title = element_text(hjust = 0.5)) +
ylab("Naprężenia [MPa]") +
geom_segment(aes(xmin = 6.53, xmax = 8))
r <- c(2,
2.5,
3,
3.5,
4,
4.5,
5,
5.5,
6,
6.5,
6.53,
6.53,
7.03,
7.53,
8.03,
8.53,
9.03,
9.53,
10.03,
10.53,
11.03,
11.53)
sigma_r <- c(3.42992271,
2.959375311,
2.579412166,
2.268190911,
2.010076721,
1.793639649,
1.610367121,
1.453813945,
1.319027815,
1.202152798,
1.100150452,
2.457523525,
4.140510245,
5.906694288,
7.745207631,
9.647998815,
11.60883214,
13.62271708,
15.68555744,
17.79392288,
19.94489334,
20.07524961)
sigma_t <- c(14.05525117,
12.12702641,
10.57000082,
9.294668029,
8.236959132,
7.350036114,
6.599015862,
5.957487058,
5.40515598,
4.926221652,
4.508233055,
9.004431989,
12.77403413,
16.72998403,
20.84793918,
25.10986569,
29.50179666,
34.01255416,
38.63296343,
43.35534108,
48.17314669,
48.46512241)
df <- data.frame(r = rep(r, 2),
naprezenia = c(sigma_r, sigma_t),
sigma = c(rep("sigma r", length(sigma_r)), rep("sigma t", length(sigma_t))))
library(ggplot2)
library(dplyr)
ggplot(df, aes(x = r, y = naprezenia, col = sigma)) +
geom_line() +
theme_minimal() +
scale_color_manual(values=c("tomato", "dodgerblue3")) +
ggtitle("Wykres naprężeń wtórnych") +
xlab("Strefa plastyczna                       Strefa sprężysta") +
theme(plot.title = element_text(hjust = 0.5)) +
ylab("Naprężenia [MPa]") +
geom_vline(xintercept = 6.53, linetype = "dashed")
ggplot(df, aes(x = r, y = naprezenia, col = sigma)) +
geom_vline(xintercept = 6.53, linetype = "dashed") +
geom_line() +
theme_minimal() +
scale_color_manual(values = c("tomato", "dodgerblue3")) +
ggtitle("Wykres naprężeń wtórnych") +
xlab("Strefa plastyczna                       Strefa sprężysta") +
theme(plot.title = element_text(hjust = 0.5)) +
ylab("Naprężenia [MPa]")
ggplot(df, aes(x = r, y = naprezenia, col = sigma)) +
geom_vline(xintercept = 6.53, linetype = "dashed") +
geom_point(k1, mapping = aes(x = r, y = naprezenia), col = "black") +
geom_line() +
theme_minimal() +
scale_color_manual(values = c("tomato", "dodgerblue3")) +
ggtitle("Wykres naprężeń wtórnych") +
xlab("Strefa plastyczna                       Strefa sprężysta") +
theme(plot.title = element_text(hjust = 0.5)) +
ylab("Naprężenia [MPa]")
k1 <- df %>%
filter(r == 6.53)
ggplot(df, aes(x = r, y = naprezenia, col = sigma)) +
geom_vline(xintercept = 6.53, linetype = "dashed") +
geom_point(k1, mapping = aes(x = r, y = naprezenia), col = "black") +
geom_line() +
theme_minimal() +
scale_color_manual(values = c("tomato", "dodgerblue3")) +
ggtitle("Wykres naprężeń wtórnych") +
xlab("Strefa plastyczna                       Strefa sprężysta") +
theme(plot.title = element_text(hjust = 0.5)) +
ylab("Naprężenia [MPa]")
ggplot(df, aes(x = r, y = naprezenia, col = sigma)) +
geom_vline(xintercept = 6.53, linetype = "dashed") +
geom_line() +
geom_point(k1, mapping = aes(x = r, y = naprezenia), col = "black") +
theme_minimal() +
scale_color_manual(values = c("tomato", "dodgerblue3")) +
ggtitle("Wykres naprężeń wtórnych") +
xlab("Strefa plastyczna                       Strefa sprężysta") +
theme(plot.title = element_text(hjust = 0.5)) +
ylab("Naprężenia [MPa]")
ggplot(df, aes(x = r, y = naprezenia, col = sigma)) +
geom_vline(xintercept = 6.53, linetype = "dashed") +
geom_line() +
geom_point(k1, mapping = aes(x = r, y = naprezenia)) +
theme_minimal() +
scale_color_manual(values = c("tomato", "dodgerblue3")) +
ggtitle("Wykres naprężeń wtórnych") +
xlab("Strefa plastyczna                       Strefa sprężysta") +
theme(plot.title = element_text(hjust = 0.5)) +
ylab("Naprężenia [MPa]")
ggplot(df, aes(x = r, y = naprezenia, col = sigma)) +
geom_vline(xintercept = 6.53, linetype = "dashed") +
geom_line() +
geom_point(k1, mapping = aes(x = r, y = naprezenia), col = "black") +
theme_minimal() +
scale_color_manual(values = c("tomato", "dodgerblue3")) +
ggtitle("Wykres naprężeń wtórnych") +
xlab("Strefa plastyczna                       Strefa sprężysta") +
theme(plot.title = element_text(hjust = 0.5)) +
ylab("Naprężenia [MPa]")
ggplot(df, aes(x = r, y = naprezenia, col = sigma)) +
geom_vline(xintercept = 6.53, linetype = "dashed") +
geom_line(size = 1) +
geom_point(k1, mapping = aes(x = r, y = naprezenia), col = "black") +
theme_minimal() +
scale_color_manual(values = c("tomato", "dodgerblue3")) +
ggtitle("Wykres naprężeń wtórnych") +
xlab("Strefa plastyczna                       Strefa sprężysta") +
theme(plot.title = element_text(hjust = 0.5)) +
ylab("Naprężenia [MPa]")
